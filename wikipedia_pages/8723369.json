{
    "id": "8723369",
    "revid": "20483999",
    "url": "https://en.wikipedia.org/wiki?curid=8723369",
    "title": "Computer architecture simulator",
    "text": "A computer architecture simulator is a &lt;a href=\"Computer%20program\"&gt;program&lt;/a&gt; that simulates the &lt;a href=\"Execution%20%28computing%29\"&gt;execution&lt;/a&gt; of &lt;a href=\"computer%20architecture\"&gt;computer architecture&lt;/a&gt;.\nComputer architecture simulators are used for the following purposes:\nCategories.\nComputer architecture simulators can be classified into many different categories depending on the context.\nFull-system simulators.\nA full-system simulator is execution-driven architecture simulation at such a level of detail that complete software stacks from real systems can run on the simulator without any modification. A full system simulator provides virtual hardware that is independent of the nature of the host computer. The full-system model typically includes &lt;a href=\"processor%20core\"&gt;processor core&lt;/a&gt;s, &lt;a href=\"peripheral%20device\"&gt;peripheral device&lt;/a&gt;s, &lt;a href=\"computer%20memory\"&gt;memories&lt;/a&gt;, interconnection buses, and &lt;a href=\"computer%20networking\"&gt;network&lt;/a&gt; connections. &lt;a href=\"Emulator\"&gt;Emulator&lt;/a&gt;s are full system simulators that imitate obsolete hardware instead of under development hardware.\nThe defining property of full-system simulation compared to an &lt;a href=\"Instruction%20Set%20Simulator\"&gt;instruction set simulator&lt;/a&gt; is that the model allows real &lt;a href=\"Device%20driver%20wrapper\"&gt;device drivers&lt;/a&gt; and &lt;a href=\"operating%20system\"&gt;operating system&lt;/a&gt;s to be run, not just single programs. Thus, full-system simulation makes it possible to simulate individual computers and networked computer nodes with all their &lt;a href=\"software\"&gt;software&lt;/a&gt;, from network device drivers to operating systems, &lt;a href=\"network%20stack\"&gt;network stack&lt;/a&gt;s, &lt;a href=\"middleware\"&gt;middleware&lt;/a&gt;, &lt;a href=\"Server%20%28computing%29\"&gt;server&lt;/a&gt;s, and &lt;a href=\"application%20program\"&gt;application program&lt;/a&gt;s.\nFull system simulation can speed the system development process by making it easier to detect, recreate and repair flaws. The use of &lt;a href=\"multi-core%20processor\"&gt;multi-core processor&lt;/a&gt;s is driving the need for full system simulation, because it can be extremely difficult and time-consuming to recreate and debug errors without the controlled environment provided by virtual hardware. This also allows the software development to take place before the hardware is ready, thus helping to validate design decisions.\nCycle-accurate simulator.\nA cycle-accurate simulator is a computer program that simulates a &lt;a href=\"microarchitecture\"&gt;microarchitecture&lt;/a&gt; on a cycle-by-cycle basis. In contrast an &lt;a href=\"instruction%20set%20simulator\"&gt;instruction set simulator&lt;/a&gt; simulates an &lt;a href=\"instruction%20set%20architecture\"&gt;instruction set architecture&lt;/a&gt; usually faster but not cycle-accurate to a specific implementation of this architecture; they are often used when emulating older hardware, where time precision is important for legacy reasons. Often, a cycle-accurate simulator is used when designing new microprocessorsthey can be tested, and benchmarked accurately (including running full operating system, or compilers) without actually building a physical chip, and easily change design many times to meet expected plan.\nCycle-accurate simulators must ensure that all operations are executed in the proper virtual (or real if it is possible) timebranch prediction, cache misses, fetches, pipeline stalls, thread context switching, and many other subtle aspects of microprocessors."
}