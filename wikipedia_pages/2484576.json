{
    "id": "2484576",
    "revid": "42425010",
    "url": "https://en.wikipedia.org/wiki?curid=2484576",
    "title": "Yes (Unix)",
    "text": "codice_1 is a &lt;a href=\"command%20%28computing%29\"&gt;command&lt;/a&gt; on &lt;a href=\"Unix\"&gt;Unix&lt;/a&gt; and &lt;a href=\"Unix-like\"&gt;Unix-like&lt;/a&gt; &lt;a href=\"operating%20system\"&gt;operating system&lt;/a&gt;s, which outputs an affirmative response, or a user-defined &lt;a href=\"string%20%28computer%20science%29\"&gt;string&lt;/a&gt; of text, continuously until killed.\nOverview.\nBy itself, the codice_1 command outputs 'y' or whatever is specified as an argument, followed by a &lt;a href=\"newline\"&gt;newline&lt;/a&gt; repeatedly until stopped by the user or otherwise &lt;a href=\"Kill%20%28Unix%29\"&gt;killed&lt;/a&gt;; when piped into a command, it will continue until the pipe breaks (i.e., the program completes its execution). However, if the user enters a &lt;a href=\"String%20%28computer%20science%29\"&gt;string&lt;/a&gt; after 'yes,' yes will output the string the same as it would 'y,' similar to &lt;a href=\"Echo%20%28command%29\"&gt;echo&lt;/a&gt;.\nThe version of codice_1 bundled in &lt;a href=\"GNU\"&gt;GNU&lt;/a&gt; &lt;a href=\"coreutils\"&gt;coreutils&lt;/a&gt; was written by David MacKenzie.\nThe command is available as a separate package for &lt;a href=\"Microsoft%20Windows\"&gt;Microsoft Windows&lt;/a&gt; as part of the &lt;a href=\"GnuWin32\"&gt;GnuWin32&lt;/a&gt; project and the &lt;a href=\"UnxUtils\"&gt;UnxUtils&lt;/a&gt; collection of &lt;a href=\"Native%20%28computing%29\"&gt;native&lt;/a&gt; &lt;a href=\"Windows%20API\"&gt;Win32&lt;/a&gt; &lt;a href=\"porting\"&gt;ports&lt;/a&gt; of common &lt;a href=\"GNU\"&gt;GNU&lt;/a&gt; Unix-like utilities.\nUses.\ncodice_1 can be used to send an affirmative (or negative; e.g. codice_5) response to any command that would otherwise request one, thereby causing the command to run non-interactively.\n&lt;a href=\"Pipeline%20%28Unix%29\"&gt;Piping&lt;/a&gt; yes to a command with many user-confirmation prompts will automatically answer all of those prompts with \"yes\" (typing 'y' and pressing return).\nThe following commands\n$ yes | sudo apt install foobar\nwill answer the prompts for confirmation with y, effectively installing \"foobar\" with &lt;a href=\"sudo\"&gt;sudo&lt;/a&gt; &lt;a href=\"APT%20%28Debian%29\"&gt;apt&lt;/a&gt; without any prompts.\nThis usage may be obsolete today, as most commands that would request response from the user have either a 'force' option (e.g., codice_6) or an 'assume-yes' option (for example,codice_7).\nAs an example, the following:\n$ rm -f *.txt\nis functionally equivalent to\n$ yes | rm *.txt\nThe codice_1 command in conjunction with the &lt;a href=\"Head%20%28Unix%29\"&gt;head&lt;/a&gt; command can be used to generate large volume files for means of testing. For example, executing\n$ yes 1234567 | head -n1000 &gt; file\nresults in a file consisting of 1000 lines each consisting of eight characters (1, 2, 3, 4, 5, 6, 7 and newline).\ncodice_1 can be used as an easy way of generating CPU load. In 2006, for example, the codice_1 command received publicity for being a means to test whether or not a user's &lt;a href=\"MacBook\"&gt;MacBook&lt;/a&gt; is affected by the \"Intermittent Shutdown Syndrome\" bug, where a MacBook would randomly shut off without any user input. By running the codice_1 command indefinitely twice via &lt;a href=\"Terminal%20%28macOS%29\"&gt;Terminal&lt;/a&gt; under &lt;a href=\"Mac%20OS%20X\"&gt;Mac OS X&lt;/a&gt;, users were able to max out their computer's CPU, and thus see if the failure was heat related.\nImplementation and performance.\nThe implementation of codice_1 on different Unix and Unix-likes was consistently implemented with a simple while-loop. The GNU Project's implementation of codice_1 was exponentially faster than any other implementation, achieved by buffering its output, leading to more output per system call. GNU's implementation may have been different to avoid infringing on the Unix copyright. The FreeBSD Project changed their implementation in 2017 to match GNU's implementation."
}