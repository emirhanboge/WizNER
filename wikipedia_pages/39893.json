{
    "id": "39893",
    "revid": "40594296",
    "url": "https://en.wikipedia.org/wiki?curid=39893",
    "title": "Sanity check",
    "text": "A sanity check or sanity test is a basic test to quickly evaluate whether a claim or the result of a calculation can possibly be true. It is a simple check to see if the produced material is rational (that the material's creator was thinking rationally, applying &lt;a href=\"sanity\"&gt;sanity&lt;/a&gt;). The point of a sanity test is to rule out certain classes of obviously false results, not to catch every possible error. A &lt;a href=\"rule-of-thumb\"&gt;rule-of-thumb&lt;/a&gt; or &lt;a href=\"back-of-the-envelope%20calculation\"&gt;back-of-the-envelope calculation&lt;/a&gt; may be checked to perform the test. The advantage of performing an initial sanity test is that of speedily evaluating basic function.\nIn arithmetic, for example, when multiplying by 9, using the &lt;a href=\"divisibility%20rule\"&gt;divisibility rule&lt;/a&gt; for 9 to verify that the &lt;a href=\"digit%20sum\"&gt;sum of digits&lt;/a&gt; of the result is divisible by 9 is a sanity test\u2014it will not catch \"every\" multiplication error, however it's a quick and simple method to discover \"many\" possible errors.\nIn &lt;a href=\"computer%20science\"&gt;computer science&lt;/a&gt;, a \"sanity test\" is a very brief run-through of the functionality of a &lt;a href=\"computer%20program\"&gt;computer program&lt;/a&gt;, system, calculation, or other analysis, to assure that part of the system or methodology works roughly as expected. This is often prior to a more exhaustive round of testing.\nMathematical.\nA sanity test can refer to various &lt;a href=\"order%20of%20magnitude\"&gt;orders of magnitude&lt;/a&gt; and other simple &lt;a href=\"rule%20of%20thumb\"&gt;rule-of-thumb&lt;/a&gt; devices applied to cross-check &lt;a href=\"mathematics\"&gt;mathematical&lt;/a&gt; &lt;a href=\"calculations\"&gt;calculations&lt;/a&gt;. For example:\nSoftware development.\nIn software development, a sanity test (a form of &lt;a href=\"software%20testing\"&gt;software testing&lt;/a&gt; which offers \"quick, broad, and shallow testing\") evaluates the result of a subset of application functionality to determine whether it is possible and reasonable to proceed with further testing of the entire application. Sanity tests may sometimes be used interchangeably with &lt;a href=\"smoke%20testing%20%28software%29\"&gt;smoke tests&lt;/a&gt; insofar as both terms denote tests which determine whether it is \"possible\" and \"reasonable\" to continue testing further. On the other hand, a distinction is sometimes made that a smoke test is a non-exhaustive test that ascertains whether the most crucial functions of a program work before proceeding with further testing whereas a sanity test refers to whether specific functionality such as a particular bug fix works as expected without testing the wider functionality of the software. In other words, a sanity test determines whether the intended result of a code change works correctly while a smoke test ensures that nothing else important was broken in the process. Sanity testing and smoke testing avoid wasting time and effort by quickly determining whether an application is too flawed to merit more rigorous &lt;a href=\"Software%20quality%20assurance\"&gt;QA testing&lt;/a&gt;, but needs more developer &lt;a href=\"debugging\"&gt;debugging&lt;/a&gt;.\nGroups of sanity tests are often bundled together for automated &lt;a href=\"unit%20testing\"&gt;unit testing&lt;/a&gt; of functions, libraries, or applications prior to &lt;a href=\"Merge%20%28version%20control%29\"&gt;merging&lt;/a&gt; development code into a testing or &lt;a href=\"Trunk%20%28software%29\"&gt;trunk&lt;/a&gt; version control &lt;a href=\"Branching%20%28version%20control%29\"&gt;branch&lt;/a&gt;, for &lt;a href=\"Build%20automation\"&gt;automated building&lt;/a&gt;, or for &lt;a href=\"continuous%20integration\"&gt;continuous integration&lt;/a&gt; and &lt;a href=\"continuous%20deployment\"&gt;continuous deployment&lt;/a&gt;.\nAnother common usage of \"sanity test\" is to denote checks which are performed program code, usually on arguments to functions or returns therefrom, to see if the answers can be assumed to be correct. The more complicated the routine, the more important that its response be checked. The trivial case is checking to see whether the &lt;a href=\"Return%20statement\"&gt;return value&lt;/a&gt; of a function indicated success or failure and to therefore cease further processing upon failure. This return value is actually often itself the result of a sanity check. For example, if the function attempted to open, write to, and close a file, a sanity check may be used to ensure that it did not fail on any of these actions\u2014which is a sanity check often ignored by programmers.\nThese kinds of sanity checks may be used during development for debugging purposes and also to aid in &lt;a href=\"troubleshooting\"&gt;troubleshooting&lt;/a&gt; software &lt;a href=\"Runtime%20%28program%20lifecycle%20phase%29\"&gt;runtime errors&lt;/a&gt;. For example, in a bank account management application, a sanity check will fail if a withdrawal requests more money than the total account balance rather than allowing the account to go negative (which wouldn't be sane). Another sanity test might be that deposits or purchases correspond to patterns established by historical data\u2014for example, large purchase transactions or ATM withdrawals in foreign locations never before visited by the card holder may be flagged for confirmation.\nSanity checks are also performed upon installation of &lt;a href=\"Software%20release%20life%20cycle\"&gt;stable, production&lt;/a&gt; software code into a new computing &lt;a href=\"Runtime%20system\"&gt;environment&lt;/a&gt; to ensure that all &lt;a href=\"Coupling%20%28computer%20programming%29\"&gt;dependencies&lt;/a&gt; are met, such as a compatible &lt;a href=\"operating%20system\"&gt;operating system&lt;/a&gt; and &lt;a href=\"Linker%20%28computing%29\"&gt;link&lt;/a&gt; &lt;a href=\"Library%20%28computing%29\"&gt;libraries&lt;/a&gt;. When a computing environment has passed all of the sanity checks, it's known as a sane environment for the installation program to proceed with reasonable expectation of success.\nA &lt;a href=\"%26quot%3BHello%2C%20World%21%26quot%3B%20program\"&gt;\"Hello, World!\" program&lt;/a&gt; is often used as a sanity test for a &lt;a href=\"Deployment%20environment%23Development\"&gt;development environment&lt;/a&gt; in a similar fashion. Rather than a complicated script running a set of unit tests, if this simple program fails to compile or execute, it proves that the supporting environment likely has a configuration problem that will prevent \"any\" code from compiling or executing. But if \"Hello world\" executes, then any problems experienced with other programs likely can be attributed to errors in that application's code rather than the environment."
}