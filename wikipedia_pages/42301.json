{
    "id": "42301",
    "revid": "20530117",
    "url": "https://en.wikipedia.org/wiki?curid=42301",
    "title": "Arity",
    "text": "Arity () is the number of &lt;a href=\"argument%20of%20a%20function\"&gt;arguments&lt;/a&gt; or &lt;a href=\"operand\"&gt;operand&lt;/a&gt;s taken by a &lt;a href=\"function%20%28mathematics%29\"&gt;function&lt;/a&gt; or &lt;a href=\"operation%20%28mathematics%29\"&gt;operation&lt;/a&gt; in &lt;a href=\"logic\"&gt;logic&lt;/a&gt;, &lt;a href=\"mathematics\"&gt;mathematics&lt;/a&gt;, and &lt;a href=\"computer%20science\"&gt;computer science&lt;/a&gt;. In mathematics, arity may also be named \"rank\", but this word can have many other meanings in mathematics. In logic and philosophy, it is also called adicity and degree. In &lt;a href=\"linguistics\"&gt;linguistics&lt;/a&gt;, it is usually named &lt;a href=\"valency%20%28linguistics%29\"&gt;valency&lt;/a&gt;.\nExamples.\nThe term \"arity\" is rarely employed in everyday usage. For example, rather than saying \"the arity of the &lt;a href=\"addition\"&gt;addition&lt;/a&gt; operation is 2\" or \"addition is an operation of arity 2\" one usually says \"addition is a binary operation\". In general, the naming of functions or operators with a given arity follows a convention similar to the one used for \"n\"-based &lt;a href=\"numeral%20system\"&gt;numeral system&lt;/a&gt;s such as &lt;a href=\"Binary%20numeral%20system\"&gt;binary&lt;/a&gt; and &lt;a href=\"hexadecimal\"&gt;hexadecimal&lt;/a&gt;. One combines a &lt;a href=\"Latin\"&gt;Latin&lt;/a&gt; prefix with the -ary ending; for example:\nNullary.\nSometimes it is useful to consider a &lt;a href=\"constant%20%28mathematics%29\"&gt;constant&lt;/a&gt; to be an operation of arity 0, and hence call it \"nullary\".\nAlso, in non-&lt;a href=\"functional%20programming\"&gt;functional programming&lt;/a&gt;, a function without arguments can be meaningful and not necessarily constant (due to &lt;a href=\"side%20effect%20%28computer%20science%29\"&gt;side effect&lt;/a&gt;s). Often, such functions have in fact some \"hidden input\" which might be &lt;a href=\"global%20variable\"&gt;global variable&lt;/a&gt;s, including the whole state of the system (time, free memory, ...). The latter are important examples which usually also exist in \"purely\" functional programming languages.\nUnary.\nExamples of &lt;a href=\"unary%20operator\"&gt;unary operator&lt;/a&gt;s in mathematics and in programming include the unary minus and plus, the increment and decrement operators in &lt;a href=\"C%20%28programming%20language%29\"&gt;C&lt;/a&gt;-style languages (not in logical languages), and the &lt;a href=\"Successor%20function\"&gt;successor&lt;/a&gt;, &lt;a href=\"factorial\"&gt;factorial&lt;/a&gt;, &lt;a href=\"Multiplicative%20inverse\"&gt;reciprocal&lt;/a&gt;, &lt;a href=\"floor%20function\"&gt;floor&lt;/a&gt;, &lt;a href=\"ceiling%20function\"&gt;ceiling&lt;/a&gt;, &lt;a href=\"fractional%20part\"&gt;fractional part&lt;/a&gt;, &lt;a href=\"sign%20function\"&gt;sign&lt;/a&gt;, &lt;a href=\"absolute%20value\"&gt;absolute value&lt;/a&gt;, &lt;a href=\"square%20root\"&gt;square root&lt;/a&gt; (the principal square root), &lt;a href=\"complex%20conjugate\"&gt;complex conjugate&lt;/a&gt; (unary of \"one\" complex number, that however has two parts at a lower level of abstraction), and &lt;a href=\"Norm%20%28mathematics%29\"&gt;norm&lt;/a&gt; functions in mathematics. The &lt;a href=\"two%27s%20complement\"&gt;two's complement&lt;/a&gt;, &lt;a href=\"Reference%20%28computer%20science%29\"&gt;address reference&lt;/a&gt; and the &lt;a href=\"logical%20NOT\"&gt;logical NOT&lt;/a&gt; operators are examples of unary operators in math and programming.\nAll functions in &lt;a href=\"lambda%20calculus\"&gt;lambda calculus&lt;/a&gt; and in some &lt;a href=\"functional%20programming%20language\"&gt;functional programming language&lt;/a&gt;s (especially those descended from &lt;a href=\"ML%20%28programming%20language%29\"&gt;ML&lt;/a&gt;) are technically unary, but see &lt;a href=\"%23n-ary\"&gt;n-ary&lt;/a&gt; below.\nAccording to &lt;a href=\"Willard%20Van%20Orman%20Quine\"&gt;Quine&lt;/a&gt;, the Latin distributives being \"singuli, bini, terni,\" and so forth, the term \"singulary\" is the correct adjective, rather than \"unary.\" &lt;a href=\"Abraham%20Robinson\"&gt;Abraham Robinson&lt;/a&gt; follows Quine's usage.\nIn philosophy, the adjective \"monadic\" is sometimes used to describe a one-place relation such as 'is square-shaped' as opposed to a two-place relation such as 'is the sister of'.\nBinary.\nMost operators encountered in programming and mathematics are of the &lt;a href=\"binary%20operation\"&gt;binary&lt;/a&gt; form. For both programming and mathematics, these include the &lt;a href=\"multiplication%20operator\"&gt;multiplication operator&lt;/a&gt;, the radix operator, the often omitted &lt;a href=\"exponentiation\"&gt;exponentiation&lt;/a&gt; operator, the &lt;a href=\"logarithm\"&gt;logarithm&lt;/a&gt; operator, the &lt;a href=\"addition\"&gt;addition&lt;/a&gt; operator, and the &lt;a href=\"Division%20%28mathematics%29\"&gt;division&lt;/a&gt; operator. Logical predicates such as \"OR\", \"&lt;a href=\"exclusive%20or\"&gt;XOR&lt;/a&gt;\", \"AND\", \"IMP\" are typically used as binary operators with two distinct operands. In &lt;a href=\"Complex%20instruction%20set%20computing\"&gt;CISC&lt;/a&gt; architectures, it is common to have two source operands (and store result in one of them).\nTernary.\nThe computer programming language &lt;a href=\"C%20%28programming%20language%29\"&gt;C&lt;/a&gt; and its various descendants (including &lt;a href=\"C%2B%2B\"&gt;C++&lt;/a&gt;, &lt;a href=\"C%20Sharp%20%28programming%20language%29\"&gt;C#&lt;/a&gt;, &lt;a href=\"Java%20%28programming%20language%29\"&gt;Java&lt;/a&gt;, &lt;a href=\"Julia%20%28programming%20language%29\"&gt;Julia&lt;/a&gt;, &lt;a href=\"Perl\"&gt;Perl&lt;/a&gt;, and others) provide the &lt;a href=\"ternary%20operator\"&gt;ternary operator&lt;/a&gt; codice_1, also known as the &lt;a href=\"conditional%20operator\"&gt;conditional operator&lt;/a&gt;, taking three operands. The first operand (the condition) is evaluated, and if it is true, the result of the entire expression is the value of the second operand, otherwise it is the value of the third operand. The &lt;a href=\"Forth%20%28programming%20language%29\"&gt;Forth&lt;/a&gt; language also contains a ternary operator, codice_2, which multiplies the first two (one-cell) numbers, dividing by the third, with the intermediate result being a double cell number. This is used when the intermediate result would overflow a single cell. The &lt;a href=\"Python%20%28programming%20language%29\"&gt;Python&lt;/a&gt; language has a ternary conditional expression, codice_3. The Unix &lt;a href=\"dc%20%28computer%20program%29\"&gt;dc calculator&lt;/a&gt; has several ternary operators, such as codice_4, which will pop three values from the stack and efficiently compute formula_6 with &lt;a href=\"arbitrary-precision%20arithmetic\"&gt;arbitrary precision&lt;/a&gt;. Additionally, many (&lt;a href=\"Reduced%20instruction%20set%20computing\"&gt;RISC&lt;/a&gt;) &lt;a href=\"assembly%20language\"&gt;assembly language&lt;/a&gt; instructions are ternary (as opposed to only two operands specified in CISC); or higher, such as MOV %AX, (%BX, %CX), which will load (MOV) into register the contents of a calculated memory location that is the sum (parenthesis) of the registers and .\n\"n\"-ary.\nFrom a mathematical point of view, a function of \"n\" arguments can always be considered as a function of one single argument which is an element of some &lt;a href=\"product%20space\"&gt;product space&lt;/a&gt;. However, it may be convenient for notation to consider \"n\"-ary functions, as for example &lt;a href=\"multilinear%20map\"&gt;multilinear map&lt;/a&gt;s (which are not linear maps on the product space, if ).\nThe same is true for programming languages, where functions taking several arguments could always be defined as functions taking a single argument of some &lt;a href=\"object%20composition\"&gt;composite type&lt;/a&gt; such as a &lt;a href=\"tuple\"&gt;tuple&lt;/a&gt;, or in languages with &lt;a href=\"higher-order%20function\"&gt;higher-order function&lt;/a&gt;s, by &lt;a href=\"currying\"&gt;currying&lt;/a&gt;.\nVarying arity.\nIn computer science, a function accepting a variable number of arguments is called \"&lt;a href=\"variadic%20function\"&gt;variadic&lt;/a&gt;\". In logic and philosophy, predicates or relations accepting a variable number of arguments are called \"&lt;a href=\"multigrade%20predicate\"&gt;multigrade&lt;/a&gt;\", anadic, or variably polyadic.\nTerminology.\n&lt;a href=\"Latin\"&gt;Latin&lt;/a&gt;ate names are commonly used for specific arities, primarily based on Latin &lt;a href=\"distributive%20number\"&gt;distributive number&lt;/a&gt;s meaning \"in group of \"n\"\", though some are based on Latin &lt;a href=\"cardinal%20number\"&gt;cardinal number&lt;/a&gt;s or &lt;a href=\"ordinal%20number\"&gt;ordinal number&lt;/a&gt;s. For example, 1-ary is based on cardinal \"unus\", rather than from distributive \"singul\u012b\" that would result in \"singulary\". \n\"n\"-\"ary\" means \"n\" operands (or parameters), but is often used as a synonym of \"polyadic\".\nThese words are often used to describe anything related to that number (e.g., undenary chess is a &lt;a href=\"chess%20variant\"&gt;chess variant&lt;/a&gt; with an 11\u00d711 board, or the &lt;a href=\"Millenary%20Petition\"&gt;Millenary Petition&lt;/a&gt; of 1603).\nThe arity of a &lt;a href=\"relation%20%28mathematics%29\"&gt;relation&lt;/a&gt; (or &lt;a href=\"predicate%20%28mathematical%20logic%29\"&gt;predicate&lt;/a&gt;) is the dimension of the &lt;a href=\"domain%20of%20a%20function\"&gt;domain&lt;/a&gt; in the corresponding &lt;a href=\"Cartesian%20product\"&gt;Cartesian product&lt;/a&gt;. (A function of arity \"n\" thus has arity \"n\"+1 considered as a relation.) \nIn &lt;a href=\"computer%20programming\"&gt;computer programming&lt;/a&gt;, there is often a &lt;a href=\"Syntax%20%28programming%20languages%29\"&gt;syntactical&lt;/a&gt; distinction between &lt;a href=\"Operator%20%28programming%29\"&gt;operators&lt;/a&gt; and &lt;a href=\"Function%20%28computer%20science%29\"&gt;functions&lt;/a&gt;; syntactical operators usually have arity 0, 1, or 2 (the &lt;a href=\"Ternary%20operation\"&gt;ternary operator&lt;/a&gt; is also common). Functions vary widely in the number of arguments, though large numbers can become unwieldy. Some programming languages also offer support for &lt;a href=\"variadic%20functions\"&gt;variadic functions&lt;/a&gt;, i.e., functions syntactically accepting a variable number of arguments.\nExternal links.\nA monograph available free online:"
}