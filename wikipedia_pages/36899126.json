{
    "id": "36899126",
    "revid": "39581748",
    "url": "https://en.wikipedia.org/wiki?curid=36899126",
    "title": "Lapsed listener problem",
    "text": "The lapsed listener problem is a common source of &lt;a href=\"memory%20leak\"&gt;memory leak&lt;/a&gt;s for &lt;a href=\"Object-oriented%20programming\"&gt;object-oriented&lt;/a&gt; programming languages, among the most common ones for &lt;a href=\"Garbage%20collection%20%28computer%20science%29\"&gt;garbage collected&lt;/a&gt; languages.\nIt originates in the &lt;a href=\"observer%20pattern\"&gt;observer pattern&lt;/a&gt;, where observers (or listeners) register with a subject (or publisher) to receive events. In basic implementation, this requires both explicit registration and explicit deregistration, as in the &lt;a href=\"dispose%20pattern\"&gt;dispose pattern&lt;/a&gt;, because the subject holds strong references to the observers, keeping them alive. The leak happens when an observer fails to unsubscribe from the subject when it no longer needs to listen. Consequently, the subject still holds a reference to the observer which prevents it from being garbage collected \u2014 including all other objects it is referring to \u2014 for as long as the subject is alive, which could be until the end of the application.\nThis causes not only a memory leak, but also a performance degradation with an \"uninterested\" observer receiving and acting on unwanted events. This can be prevented by the subject holding &lt;a href=\"weak%20reference\"&gt;weak reference&lt;/a&gt;s to the observers, allowing them to be garbage collected as normal without needing to be unregistered."
}