{
    "id": "351542",
    "revid": "30607451",
    "url": "https://en.wikipedia.org/wiki?curid=351542",
    "title": "Filename",
    "text": "A filename or file name is a name used to uniquely identify a &lt;a href=\"computer%20file\"&gt;computer file&lt;/a&gt; in a &lt;a href=\"directory%20structure\"&gt;directory structure&lt;/a&gt;. Different file systems impose different restrictions on filename lengths and the allowed characters within filenames.\nA filename may (depending on the file system) include one or more of these components:\nThe components required to identify a file varies across operating systems, as does the syntax and format for a valid filename.\nDiscussions of filenames are complicated by a lack of standardization of the term. Sometimes \"filename\" is used to mean the entire name, such as the Windows name \"c:\\directory\\myfile.txt\". Sometimes, it will be used to refer to the components, so the filename in this case would be \"myfile.txt\". Sometimes, it is a reference that excludes an extension, so the filename would be just \"myfile\".\nHistory.\nThe &lt;a href=\"full%20stop\"&gt;dot&lt;/a&gt; (period or full-stop) as a filename extension separator, as well as the limit to three-letter extensions, appeared in the 1970s. They may have come from 16-bit &lt;a href=\"DEC%20Radix-50\"&gt;RAD50&lt;/a&gt; character encoding limits.\nTraditionally, most operating system supported filenames with only uppercase &lt;a href=\"alphanumeric\"&gt;alphanumeric&lt;/a&gt; characters, but as time progressed, the number of characters allowed increased. This led to compatibility problems when moving files between different file systems.\nDuring the 1970s, some &lt;a href=\"mainframe\"&gt;mainframe&lt;/a&gt; and &lt;a href=\"minicomputers\"&gt;minicomputers&lt;/a&gt; implemented accounting systems, where files on the system were identified by a user name, or account number. This, in effect, was a crude form of directory system. \nFor example, on &lt;a href=\"Digital%20Equipment%20Corporation\"&gt;Digital Equipment Corporation&lt;/a&gt; &lt;a href=\"RSTS/E\"&gt;RSTS/E&lt;/a&gt; and &lt;a href=\"TOPS-10\"&gt;TOPS-10&lt;/a&gt; operating systems, files were identified by\nOn the &lt;a href=\"IBM\"&gt;IBM&lt;/a&gt; &lt;a href=\"OS/VS1\"&gt;OS/VS1&lt;/a&gt;, &lt;a href=\"OS/390\"&gt;OS/390&lt;/a&gt; and &lt;a href=\"MVS\"&gt;MVS&lt;/a&gt; operating systems, a file name was up to 44 characters, consisting of upper case letters, digits, and the period. A file name must start with a letter or number, a period must occur at least once each 8 characters, two consecutive periods could not appear in the name, and must end with a letter or digit. By convention, the letters and numbers before the first period was the account number of the owner or the project it belonged to, but there was no requirement to use this convention.\nOn the McGill University &lt;a href=\"MUSIC/SP\"&gt;MUSIC/SP&lt;/a&gt; system, file names consisted of\nThe Univac &lt;a href=\"VS/9\"&gt;VS/9&lt;/a&gt; operating system had file names consisting of \nIn 1985, &lt;a href=\"Request%20for%20Comments\"&gt;RFC&lt;/a&gt; 959 officially defined a \"pathname\" to be the character string that must be entered into a file system by a user in order to identify a file.\nAround 1995, &lt;a href=\"VFAT\"&gt;VFAT&lt;/a&gt;, an extension to the MS-DOS FAT filesystem, was introduced in &lt;a href=\"Windows%2095\"&gt;Windows 95&lt;/a&gt; and &lt;a href=\"Windows%20NT\"&gt;Windows NT&lt;/a&gt;. It allowed mixed-case &lt;a href=\"Unicode\"&gt;Unicode&lt;/a&gt; &lt;a href=\"long%20filename\"&gt;long filename&lt;/a&gt;s (LFNs), in addition to classic \"8.3\" names.\nReferences: absolute vs relative.\nAn absolute reference includes all directory levels. In some systems, a filename reference that does not include the complete directory path defaults to the &lt;a href=\"current%20working%20directory\"&gt;current working directory&lt;/a&gt;. This is a relative reference. One advantage of using a relative reference in program configuration files or scripts is that different instances of the script or program can use different files.\nThis makes an absolute or relative path composed of a sequence of filenames.\nNumber of names per file.\nUnix-like file systems allow a file to have more than one name; in traditional Unix-style file systems, the names are &lt;a href=\"hard%20link\"&gt;hard link&lt;/a&gt;s to the file's &lt;a href=\"inode\"&gt;inode&lt;/a&gt; or equivalent. Windows supports hard links on &lt;a href=\"NTFS\"&gt;NTFS&lt;/a&gt; file systems, and provides the command codice_7 in Windows XP, and codice_8 in later versions, for creating them. Hard links are different from Windows &lt;a href=\"Computer%20shortcut\"&gt;shortcuts&lt;/a&gt;, &lt;a href=\"classic%20Mac%20OS\"&gt;classic Mac OS&lt;/a&gt;/&lt;a href=\"macOS\"&gt;macOS&lt;/a&gt; &lt;a href=\"Alias%20%28Mac%20OS%29\"&gt;aliases&lt;/a&gt;, or &lt;a href=\"symbolic%20link\"&gt;symbolic link&lt;/a&gt;s. The introduction of &lt;a href=\"Long%20filename\"&gt;LFN&lt;/a&gt;s with &lt;a href=\"VFAT\"&gt;VFAT&lt;/a&gt; allowed filename aliases. For example, codice_9 with a maximum of eight plus three characters was a filename alias of \"codice_10\" as a way to conform to 8.3 limitations for older programs.\nThis property was used by the move command algorithm that first creates a second filename and then only removes the first filename.\nOther filesystems, by design, provide only one filename per file, which guarantees that alteration of one filename's file does not alter the other filename's file.\nLength restrictions.\nSome filesystems restrict the length of filenames. In some cases, these lengths apply to the entire file name, as in 44 characters on IBM S/370. In other cases, the length limits may apply to particular portions of the filename, such as the name of a file in a directory, or a directory name. For example, 9 (e.g., &lt;a href=\"8-bit%20FAT\"&gt;8-bit FAT&lt;/a&gt; in &lt;a href=\"Standalone%20Disk%20BASIC\"&gt;Standalone Disk BASIC&lt;/a&gt;), 11 (e.g. &lt;a href=\"FAT12\"&gt;FAT12&lt;/a&gt;, &lt;a href=\"FAT16\"&gt;FAT16&lt;/a&gt;, &lt;a href=\"FAT32\"&gt;FAT32&lt;/a&gt; in DOS), 14 (e.g. early Unix), 21 (&lt;a href=\"Human68K\"&gt;Human68K&lt;/a&gt;), 31, 30 (e.g. &lt;a href=\"Apple%20DOS\"&gt;Apple DOS&lt;/a&gt; 3.2 and 3.3), 15 (e.g. &lt;a href=\"Apple%20ProDOS\"&gt;Apple ProDOS&lt;/a&gt;), 44 (e.g. IBM S/370), or 255 (e.g. early Berkeley Unix) characters or bytes. Length limits often result from assigning fixed space in a filesystem to storing components of names, so increasing limits often requires an incompatible change, as well as reserving more space.\nA particular issue with filesystems that store information in nested directories is that it may be possible to create a file with a complete pathname that exceeds implementation limits, since length checking may apply only to individual parts of the name rather than the entire name. Many Windows applications are limited to a codice_11 value of 260, but Windows file names can easily exceed this limit &lt;a href=\"http%3A//msdn.microsoft.com/en-gb/library/windows/desktop/aa365247%28v%3Dvs.85%29.aspx\"&gt;&lt;/a&gt;. From &lt;a href=\"Windows%2010%20version%20history%20%28version%201607%29\"&gt;Windows 10, version 1607&lt;/a&gt;, MAX_PATH limitations have been removed.\nFilename extensions.\nMany file systems, including &lt;a href=\"File%20Allocation%20Table\"&gt;FAT&lt;/a&gt;, &lt;a href=\"NTFS\"&gt;NTFS&lt;/a&gt;, and &lt;a href=\"OpenVMS\"&gt;VMS&lt;/a&gt; systems, consider as &lt;a href=\"filename%20extension\"&gt;filename extension&lt;/a&gt; the part of the file name that consists of one or more characters following the last period in the filename, dividing the filename into two parts: a \"base name\" or \"stem\" and an \"extension\" or \"suffix\" used by some applications to indicate the &lt;a href=\"file%20type\"&gt;file type&lt;/a&gt;. Multiple output files created by an application use the same basename and various extensions. For example, a compiler might use the extension codice_12 for source input file (for Fortran code), codice_13 for the object output and codice_14 for the listing. Although there are some common extensions, they are arbitrary and a different application might use codice_15 and codice_16. Extensions have been restricted, at least historically on some systems, to a length of 3 characters, but in general can have any length, e.g., codice_17.\nEncoding interoperability.\nThere is no general encoding standard for filenames.\nFile names have to be exchanged between software environments for network file transfer, file system storage, backup and file synchronization software, configuration management, data compression and archiving, etc. It is thus very important not to lose file name information between applications. This led to wide adoption of Unicode as a standard for encoding file names, although legacy software might not be Unicode-aware.\nEncoding indication interoperability.\nTraditionally, filenames allowed any character in their filenames as long as they were file system safe. Although this permitted the use of any encoding, and thus allowed the representation of any local text on any local system, it caused many interoperability issues.\nA filename could be stored using different byte strings in distinct systems within a single country, such as if one used Japanese &lt;a href=\"Shift%20JIS\"&gt;Shift JIS&lt;/a&gt; encoding and another Japanese &lt;a href=\"EUC-JP\"&gt;EUC&lt;/a&gt; encoding. Conversion was not possible as most systems did not expose a description of the encoding used for a filename as part of the extended file information. This forced costly filename encoding guessing with each file access.\nA solution was to adopt Unicode as the encoding for filenames.\nIn the classic Mac OS, however, encoding of the filename was stored with the filename attributes.\nUnicode interoperability.\nThe Unicode standard solves the encoding determination issue.\nNonetheless, some limited interoperability issues remain, such as normalization (equivalence), or the Unicode version in use. For instance, UDF is limited to Unicode 2.0; macOS's &lt;a href=\"HFS%2B\"&gt;HFS+&lt;/a&gt; file system applies NFD Unicode normalization and is optionally case-sensitive (case-insensitive by default.) Filename maximum length is not standard and might depend on the code unit size. Although it is a serious issue, in most cases this is a limited one.\nOn Linux, this means the filename is not enough to open a file: additionally, the exact byte representation of the filename on the storage device is needed. This can be solved at the application level, with some tricky normalization calls.\nThe issue of Unicode equivalence is known as \"normalized-name collision\". A solution is the \"Non-normalizing Unicode Composition Awareness\" used in the Subversion and Apache technical communities. This solution does not normalize paths in the repository. Paths are only normalized for the purpose of comparisons. Nonetheless, some communities have patented this strategy, forbidding its use by other communities.\nPerspectives.\nTo limit interoperability issues, some ideas described by Sun are to:\nThose considerations create a limitation not allowing a switch to a future encoding different from UTF-8.\nUnicode migration.\nOne issue was migration to Unicode.\nFor this purpose, several software companies provided software for migrating filenames to the new Unicode encoding.\n&lt;a href=\"Mac%20OS%20X%2010.3\"&gt;Mac OS X 10.3&lt;/a&gt; marked Apple's adoption of Unicode 3.2 character decomposition, superseding the Unicode 2.1 decomposition used previously. This change caused problems for developers writing software for Mac OS X.\nUniqueness.\nWithin a single directory, filenames must be unique. Since the filename syntax also applies for directories, it is not possible to create a file and directory entries with the same name in a single directory. Multiple files in different directories may have the same name.\nUniqueness approach may differ both on the case sensitivity and on the &lt;a href=\"Unicode%20equivalence\"&gt;Unicode normalization form&lt;/a&gt; such as NFC, NFD.\nThis means two separate files might be created with the same text filename and a different byte implementation of the filename, such as L\"\\x00C0.txt\" (UTF-16, NFC) (Latin capital A with grave) and L\"\\x0041\\x0300.txt\" (UTF-16, NFD) (Latin capital A, grave combining).\nLetter case preservation.\nSome filesystems, such as &lt;a href=\"File%20Allocation%20Table\"&gt;FAT&lt;/a&gt;, store filenames as upper-case regardless of the &lt;a href=\"letter%20case\"&gt;letter case&lt;/a&gt; used to create them. For example, a file created with the name \"MyName.Txt\" or \"myname.txt\" would be stored with the filename \"MYNAME.TXT\". Any variation of upper and lower case can be used to refer to the same file. These kinds of file systems are called case-insensitive and are not case-preserving. Some filesystems prohibit the use of lower case letters in filenames altogether.\nSome file systems store filenames in the form that they were originally created; these are referred to as case-retentive or case-preserving. Such a file system can be case-sensitive or case-insensitive. If case-sensitive, then \"MyName.Txt\" and \"myname.txt\" may refer to two different files in the same directory, and each file must be referenced by the exact capitalization by which it is named. On a case-insensitive, case-preserving file system, on the other hand, only one of \"MyName.Txt\", \"myname.txt\" and \"Myname.TXT\" can be the name of a file in a given directory at a given time, and a file with one of these names can be referenced by any capitalization of the name.\nFrom its original inception, Unix and its derivative systems were case-preserving. However, not all Unix-like file systems are case-sensitive; by default, &lt;a href=\"HFS%2B\"&gt;HFS+&lt;/a&gt; in &lt;a href=\"macOS\"&gt;macOS&lt;/a&gt; is case-insensitive, and &lt;a href=\"Server%20Message%20Block\"&gt;SMB&lt;/a&gt; servers usually provide case-insensitive behavior (even when the underlying file system is case-sensitive, e.g. &lt;a href=\"Samba%20%28software%29\"&gt;Samba&lt;/a&gt; on most Unix-like systems), and SMB client file systems provide case-insensitive behavior. File system &lt;a href=\"case%20sensitivity\"&gt;case sensitivity&lt;/a&gt; is a considerable challenge for software such as Samba and &lt;a href=\"Wine%20%28software%29\"&gt;Wine&lt;/a&gt;, which must interoperate efficiently with both systems that treat uppercase and lowercase files as different and with systems that treat them the same.\nReserved characters and words.\nFile systems have not always provided the same character set for composing a filename. Before &lt;a href=\"Unicode\"&gt;Unicode&lt;/a&gt; became a de facto standard, file systems mostly used a locale-dependent character set. By contrast, some new systems permit a filename to be composed of almost any character of the Unicode repertoire, and even some non-Unicode byte sequences. Limitations may be imposed by the file system, operating system, application, or requirements for interoperability with other systems.\nMany file system utilities prohibit &lt;a href=\"control%20character\"&gt;control character&lt;/a&gt;s from appearing in filenames. In Unix-like file systems, the &lt;a href=\"null%20character\"&gt;null character&lt;/a&gt; and the path separator codice_18 are prohibited.\nIn Windows.\nFile system utilities and naming conventions on various systems prohibit particular characters from appearing in filenames or make them problematic:\nNote 1: While they are allowed in Unix file and folder names, most &lt;a href=\"Unix%20shell\"&gt;Unix shell&lt;/a&gt;s require specific characters such as spaces, &lt;, &gt;, |, \\, and sometimes :, (, ), &amp;, ;, #, as well as wildcards such as ? and *, to be quoted or &lt;a href=\"Escape%20character\"&gt;escaped&lt;/a&gt;:\ncodice_19 (example of escaping)codice_20 or codice_21 (examples of quoting)\nThe character (codice_22) was not allowed as the first letter in a filename under &lt;a href=\"86-DOS\"&gt;86-DOS&lt;/a&gt; and MS-DOS/PC DOS 1.x-2.x, but can be used in later versions.\nIn Windows utilities, the space and the period are not allowed as the final character of a filename. The period is allowed as the first character, but some Windows applications, such as &lt;a href=\"Windows%20Explorer\"&gt;Windows Explorer&lt;/a&gt;, forbid creating or renaming such files (despite this convention being used in Unix-like systems to describe &lt;a href=\"hidden%20file\"&gt;hidden file&lt;/a&gt;s and directories). Workarounds include appending a dot when renaming the file (that is then automatically removed afterwards), using alternative &lt;a href=\"file%20manager\"&gt;file manager&lt;/a&gt;s, creating the file using the command line, or saving a file with the desired filename from within an application.\nSome file systems on a given operating system (especially file systems originally implemented on other operating systems), and particular applications on that operating system, may apply further restrictions and interpretations. See &lt;a href=\"comparison%20of%20file%20systems\"&gt;comparison of file systems&lt;/a&gt; for more details on restrictions.\nIn Unix-like systems, DOS, and Windows, the filenames \".\" and \"..\" have special meanings (current and parent directory respectively). &lt;a href=\"Windows%209x\"&gt;Windows 95/98/ME&lt;/a&gt; also uses names like \"...\", \"...\" and so on to denote grandparent or great-grandparent directories. All Windows versions forbid creation of filenames that consist of only dots, although names consist of three dots (\"...\") or more are legal in Unix.\nIn addition, in Windows and DOS utilities, some words are also reserved and cannot be used as filenames. For example, &lt;a href=\"DOS\"&gt;DOS&lt;/a&gt; &lt;a href=\"device%20file\"&gt;device file&lt;/a&gt;s:\n CON, PRN, AUX, CLOCK$, NUL\n COM0, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9\n LPT0, LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, LPT9\n LST (only in &lt;a href=\"86-DOS\"&gt;86-DOS&lt;/a&gt; and DOS 1.xx)\n KEYBD$, SCREEN$ (only in multitasking &lt;a href=\"MS-DOS%204.0%20%28multitasking%29\"&gt;MS-DOS 4.0&lt;/a&gt;)\n $IDLE$ (only in &lt;a href=\"Concurrent%20DOS%20386\"&gt;Concurrent DOS 386&lt;/a&gt;, &lt;a href=\"Multiuser%20DOS\"&gt;Multiuser DOS&lt;/a&gt; and &lt;a href=\"DR%20DOS%205.0\"&gt;DR DOS 5.0&lt;/a&gt; and higher)\n CONFIG$ (only in MS-DOS 7.0-8.0)\nSystems that have these restrictions cause incompatibilities with some other filesystems. For example, Windows will fail to handle, or raise error reports for, these legal UNIX filenames: aux.c, q\"uote\"s.txt, or NUL.txt.\nNTFS filenames that are used internally include:\n $Mft, $MftMirr, $LogFile, $Volume, $AttrDef, $Bitmap, $Boot, $BadClus, $Secure,\n $Upcase, $Extend, $Quota, $ObjId and $Reparse"
}