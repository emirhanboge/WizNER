{
    "id": "216381",
    "revid": "42425010",
    "url": "https://en.wikipedia.org/wiki?curid=216381",
    "title": "Boot sector",
    "text": "A boot sector is the &lt;a href=\"disk%20sector\"&gt;sector&lt;/a&gt; of a persistent &lt;a href=\"data%20storage%20device\"&gt;data storage device&lt;/a&gt; (e.g., &lt;a href=\"hard%20disk\"&gt;hard disk&lt;/a&gt;, &lt;a href=\"floppy%20disk\"&gt;floppy disk&lt;/a&gt;, &lt;a href=\"optical%20disc\"&gt;optical disc&lt;/a&gt;, etc.) which contains &lt;a href=\"machine%20code\"&gt;machine code&lt;/a&gt; to be loaded into &lt;a href=\"random-access%20memory\"&gt;random-access memory&lt;/a&gt; (RAM) and then executed by a &lt;a href=\"computer%20system\"&gt;computer system&lt;/a&gt;'s built-in &lt;a href=\"firmware\"&gt;firmware&lt;/a&gt; (e.g., the &lt;a href=\"BIOS\"&gt;BIOS&lt;/a&gt;).\nUsually, the very first sector of the hard disk is the boot sector, regardless of sector size (512 or 4096 bytes) and partitioning flavor (MBR or GPT).\nThe purpose of defining one particular sector as the \"boot sector\" is inter-operability between various firmwares and various operating systems.\nThe purpose of chainloading first a firmware (e.g., the BIOS), then some code contained in the boot sector, and then, for example, an operating system, is maximal flexibility.\nThe IBM PC and compatible computers.\nOn an &lt;a href=\"IBM%20PC%20compatible\"&gt;IBM PC compatible&lt;/a&gt; machine, the &lt;a href=\"BIOS\"&gt;BIOS&lt;/a&gt; selects a boot device, then copies the first sector from the device (which may be a &lt;a href=\"master%20boot%20record\"&gt;MBR&lt;/a&gt;, &lt;a href=\"Volume%20Boot%20Record\"&gt;VBR&lt;/a&gt; or any executable code), into &lt;a href=\"physical%20memory\"&gt;physical memory&lt;/a&gt; at &lt;a href=\"memory%20address\"&gt;memory address&lt;/a&gt; 0x7C00. On other systems, the process may be quite different.\nUnified Extensible Firmware Interface (UEFI).\nThe &lt;a href=\"UEFI\"&gt;UEFI&lt;/a&gt; (not legacy boot via CSM) does not rely on boot sectors, UEFI system loads the boot loader (EFI application file in &lt;a href=\"USB%20disk\"&gt;USB disk&lt;/a&gt; or in the &lt;a href=\"EFI%20system%20partition\"&gt;EFI system partition&lt;/a&gt;) directly. Additionally, the UEFI specification also contains \"secure boot\", which basically wants the UEFI code to be &lt;a href=\"digitally%20signed\"&gt;digitally signed&lt;/a&gt;.\nDamage to the boot sector.\nIn case a boot sector receives physical damage, the hard disk will no longer be bootable; unless when used with a custom BIOS, which defines a non-damaged sector as the boot sector. However, since the very first sector additionally contains data regarding the partitioning of the hard disk, the hard disk will become entirely unusable, except when used in conjunction with custom software.\nPartition tables.\nA disk can be partitioned into multiple partitions and, on conventional systems, it is expected to be. There are two definitions on how to store the information regarding the partitioning:\nThe presence of an IBM PC compatible boot loader for x86-CPUs in the boot sector is by convention indicated by a two-byte hexadecimal sequence 0x55 0xAA (called the boot sector signature) at the end of the boot sector (offsets 0x1FE and 0x1FF). This signature indicates the presence of at least a dummy boot loader which is safe to be executed, even if it may not be able actually to load an operating system. It does not indicate a particular (or even the presence of) &lt;a href=\"file%20system\"&gt;file system&lt;/a&gt; or operating system, although some old versions of DOS 3 relied on it in their process to detect &lt;a href=\"File%20Allocation%20Table\"&gt;FAT&lt;/a&gt;-formatted media (newer versions do not). Boot code for other platforms or CPUs should not use this signature, since this may lead to a crash when the BIOS passes execution to the boot sector assuming that it contains valid executable code. Nevertheless, some media for other platforms erroneously contain the signature, anyway, rendering this check not 100% reliable in practice.\nThe signature is checked for by most system BIOSes since (at least) the &lt;a href=\"IBM%20Personal%20Computer/AT\"&gt;IBM PC/AT&lt;/a&gt; (but not by the original IBM PC and some other machines). Even more so, it is also checked by most MBR boot loaders before passing control to the boot sector. Some BIOSes (like the IBM PC/AT) perform the check only for fixed disk/removable drives, while for floppies and superfloppies, it is enough to start with a byte greater or equal to 06h and the first nine words not to contain the same value, before the boot sector is accepted as valid, thereby avoiding the explicit test for 0x55, 0xAA on floppies. Since old boot sectors (e.g., very old CP/M-86 and DOS media) sometimes do not feature this signature despite the fact that they can be booted successfully, the check can be disabled in some environments.\nIf the BIOS or MBR code does not detect a valid boot sector and therefore cannot pass execution to the boot sector code, it will try the next boot device in the row. If they all fail it will typically display an error message and invoke INT 18h. This will either start up optional resident software in ROM (&lt;a href=\"ROM%20BASIC\"&gt;ROM BASIC&lt;/a&gt;), reboot the system via INT 19h after user confirmation or cause the system to halt the &lt;a href=\"bootstrapping%20%28computing%29\"&gt;bootstrapping&lt;/a&gt; process until the next power-up.\nSystems not following the above described design are:\nOperation.\nOn &lt;a href=\"IBM%20PC%20compatible\"&gt;IBM PC compatible&lt;/a&gt; machines, the &lt;a href=\"BIOS\"&gt;BIOS&lt;/a&gt; is ignorant of the distinction between VBRs and MBRs, and of partitioning. The firmware simply loads and runs the first sector of the storage device. If the device is a floppy or &lt;a href=\"USB%20flash%20drive\"&gt;USB flash drive&lt;/a&gt;, that will be a VBR. If the device is a hard disk, that will be an MBR. It is the code in the MBR which generally understands disk partitioning, and in turn, is responsible for loading and running the VBR of whichever primary partition is set to boot (the \"active\" partition). The VBR then loads a second-stage bootloader from another location on the disk.\nFurthermore, whatever is stored in the first sector of a floppy diskette, USB device, hard disk or any other \"bootable\" storage device, is not required to immediately load any bootstrap code for an OS, if ever. The BIOS merely passes control to whatever exists there, as long as the sector meets the very simple qualification of having the boot record signature of 0x55, 0xAA in its last two bytes. This is why it is easy to replace the usual bootstrap code found in an MBR with more complex loaders, even large multi-functional &lt;a href=\"Booting\"&gt;boot managers&lt;/a&gt; (programs stored elsewhere on the device which can run without an operating system), allowing users a number of choices in what occurs next. With this kind of freedom, abuse often occurs in the form of boot sector viruses.\nBoot sector viruses.\nSince code in the boot sector is executed automatically, boot sectors have historically been a common attack vector for &lt;a href=\"computer%20virus\"&gt;computer virus&lt;/a&gt;es.\nTo combat this behavior, the &lt;a href=\"system%20BIOS\"&gt;system BIOS&lt;/a&gt; often includes an option to prevent software from writing to the first sector of any attached hard drives; it could thereby protect the &lt;a href=\"master%20boot%20record\"&gt;master boot record&lt;/a&gt; containing the &lt;a href=\"partition%20table\"&gt;partition table&lt;/a&gt; from being overwritten accidentally, but not the &lt;a href=\"volume%20boot%20record\"&gt;volume boot record&lt;/a&gt;s in the bootable partitions. Depending on the BIOS, attempts to write to the protected sector may be blocked with or without user interaction. Most BIOSes, however, will display a popup message giving the user a chance to override the setting.\nThe BIOS option is disabled by default because the message may not be displayed correctly in graphics mode and blocking access to the MBR may cause problems with operating system setup programs or disk access, encryption or partitioning tools like &lt;a href=\"FDISK\"&gt;FDISK&lt;/a&gt;, which may not have been written to be aware of that possibility, causing them to abort ungracefully and possibly leaving the disk partitioning in an inconsistent state.\nAs an example, the malware &lt;a href=\"Petya%20%28malware%29\"&gt;NotPetya&lt;/a&gt; attempts to gain administrative privileges on an operating system, and then would attempt to overwrite the boot sector of a computer. The &lt;a href=\"Central%20Intelligence%20Agency\"&gt;CIA&lt;/a&gt; has also developed malware that attempts to modify the boot sector in order to load additional drivers to be used by other malware."
}