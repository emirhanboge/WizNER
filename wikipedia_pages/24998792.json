{
    "id": "24998792",
    "revid": "13157623",
    "url": "https://en.wikipedia.org/wiki?curid=24998792",
    "title": "Debugging",
    "text": "In &lt;a href=\"computer%20programming\"&gt;computer programming&lt;/a&gt; and &lt;a href=\"software%20development\"&gt;software development&lt;/a&gt;, debugging is the process of finding and resolving \"&lt;a href=\"Software%20bug\"&gt;bugs&lt;/a&gt;\" (defects or problems that prevent correct operation) within &lt;a href=\"computer%20program\"&gt;computer program&lt;/a&gt;s, &lt;a href=\"software\"&gt;software&lt;/a&gt;, or &lt;a href=\"Software%20system\"&gt;system&lt;/a&gt;s.\nDebugging tactics can involve &lt;a href=\"interactive\"&gt;interactive&lt;/a&gt; debugging, &lt;a href=\"control%20flow\"&gt;control flow&lt;/a&gt; analysis, &lt;a href=\"unit%20testing\"&gt;unit testing&lt;/a&gt;, &lt;a href=\"integration%20testing\"&gt;integration testing&lt;/a&gt;, &lt;a href=\"Logfile\"&gt;log file analysis&lt;/a&gt;, monitoring at the &lt;a href=\"application%20monitoring\"&gt;application&lt;/a&gt; or &lt;a href=\"system%20monitoring\"&gt;system&lt;/a&gt; level, &lt;a href=\"memory%20dump\"&gt;memory dump&lt;/a&gt;s, and &lt;a href=\"profiling%20%28computer%20programming%29\"&gt;profiling&lt;/a&gt;. Many programming languages and software development tools also offer programs to aid in debugging, known as \"&lt;a href=\"debugger\"&gt;debugger&lt;/a&gt;s\".\nEtymology.\nThe terms \"bug\" and \"debugging\" are popularly attributed to &lt;a href=\"Admiral%20Grace%20Hopper\"&gt;Admiral Grace Hopper&lt;/a&gt; in the 1940s. While she was working on a &lt;a href=\"Harvard%20Mark%20II\"&gt;Mark II&lt;/a&gt; computer at Harvard University, her associates discovered a moth stuck in a relay and thereby impeding operation, whereupon she remarked that they were \"debugging\" the system. However, the term \"bug\", in the sense of \"technical error\", dates back at least to 1878 and &lt;a href=\"Thomas%20Edison\"&gt;Thomas Edison&lt;/a&gt; (see &lt;a href=\"software%20bug\"&gt;software bug&lt;/a&gt; for a full discussion). Similarly, the term \"debugging\" seems to have been used as a term in aeronautics before entering the world of computers. Indeed, in an interview Grace Hopper remarked that she was not coining the term. The moth fit the already existing terminology, so it was saved. A letter from &lt;a href=\"J.%20Robert%20Oppenheimer\"&gt;J. Robert Oppenheimer&lt;/a&gt; (director of the WWII atomic bomb \"Manhattan\" project at Los Alamos, NM) used the term in a letter to Dr. &lt;a href=\"Ernest%20Lawrence\"&gt;Ernest Lawrence&lt;/a&gt; at UC Berkeley, dated October 27, 1944, regarding the recruitment of additional technical staff.\nThe &lt;a href=\"Oxford%20English%20Dictionary\"&gt;Oxford English Dictionary&lt;/a&gt; entry for \"debug\" quotes the term \"debugging\" used in reference to airplane engine testing in a 1945 article in the Journal of the Royal Aeronautical Society. An article in \"Airforce\" (June 1945 p.\u00a050) also refers to debugging, this time of aircraft cameras. Hopper's &lt;a href=\"computer%20bug\"&gt;bug&lt;/a&gt; was found on September 9, 1947. Computer programmers did not adopt the term until the early 1950s.\nThe seminal article by Gill in 1951 is the earliest in-depth discussion of programming errors, but it does not use the term \"bug\" or \"debugging\".\nIn the &lt;a href=\"Association%20for%20Computing%20Machinery\"&gt;ACM&lt;/a&gt;'s digital library, the term \"debugging\" is first used in three papers from 1952 ACM National Meetings. Two of the three use the term in quotation marks.\nBy 1963 \"debugging\" was a common-enough term to be mentioned in passing without explanation on page 1 of the &lt;a href=\"Compatible%20Time-Sharing%20System\"&gt;CTSS&lt;/a&gt; manual.\n&lt;a href=\"Peggy%20A.%20Kidwell\"&gt;Peggy A. Kidwell&lt;/a&gt;'s article \"Stalking the Elusive Computer Bug\" discusses the etymology of \"bug\" and \"debug\" in greater detail.\nScope.\nAs software and electronic systems have become generally more complex, the various common debugging techniques have expanded with more methods to detect anomalies, assess impact, and schedule &lt;a href=\"software%20patch\"&gt;software patch&lt;/a&gt;es or full updates to a system. The words \"anomaly\" and \"discrepancy\" can be used, as being &lt;a href=\"euphemism\"&gt;more neutral terms&lt;/a&gt;, to avoid the words \"error\" and \"defect\" or \"bug\" where there might be an implication that all so-called \"errors\", \"defects\" or \"bugs\" must be fixed (at all costs). Instead, an &lt;a href=\"impact%20assessment\"&gt;impact assessment&lt;/a&gt; can be made to determine if changes to remove an \"anomaly\" (or \"discrepancy\") would be cost-effective for the system, or perhaps a scheduled new release might render the unnecessary. Not all issues are &lt;a href=\"safety-critical%20system\"&gt;safety-critical&lt;/a&gt; or &lt;a href=\"mission-critical\"&gt;mission-critical&lt;/a&gt; in a system. Also, it is important to avoid the situation where a change might be more upsetting to users, long-term, than living with the known (where the \"cure would be worse than the disease\"). Basing decisions of the acceptability of some anomalies can avoid a culture of a \"zero-defects\" mandate, where people might be tempted to deny the existence of problems so that the result would appear as zero \"defects\". Considering the collateral issues, such as the cost-versus-benefit impact assessment, then broader debugging techniques will expand to determine the frequency of anomalies (how often the same \"bugs\" occur) to help assess their impact to the overall system.\nTools.\nDebugging ranges in complexity from fixing simple errors to performing lengthy and tiresome tasks of data collection, analysis, and scheduling updates. The debugging skill of the programmer can be a major factor in the ability to debug a problem, but the difficulty of software debugging varies greatly with the complexity of the system, and also depends, to some extent, on the &lt;a href=\"programming%20language\"&gt;programming language&lt;/a&gt;(s) used and the available tools, such as \"&lt;a href=\"debugger\"&gt;debugger&lt;/a&gt;s\". Debuggers are software tools which enable the &lt;a href=\"programmer\"&gt;programmer&lt;/a&gt; to monitor the &lt;a href=\"execution%20%28computing%29\"&gt;execution&lt;/a&gt; of a program, stop it, restart it, set &lt;a href=\"breakpoint\"&gt;breakpoint&lt;/a&gt;s, and change values in memory. The term \"debugger\" can also refer to the person who is doing the debugging.\nGenerally, &lt;a href=\"high-level%20programming%20language\"&gt;high-level programming language&lt;/a&gt;s, such as &lt;a href=\"Java%20%28programming%20language%29\"&gt;Java&lt;/a&gt;, make debugging easier, because they have features such as &lt;a href=\"exception%20handling\"&gt;exception handling&lt;/a&gt; and &lt;a href=\"type%20checking\"&gt;type checking&lt;/a&gt; that make real sources of erratic behaviour easier to spot. In programming languages such as &lt;a href=\"C%20%28programming%20language%29\"&gt;C&lt;/a&gt; or &lt;a href=\"assembly%20language\"&gt;assembly&lt;/a&gt;, bugs may cause silent problems such as &lt;a href=\"memory%20corruption\"&gt;memory corruption&lt;/a&gt;, and it is often difficult to see where the initial problem happened. In those cases, &lt;a href=\"memory%20debugging\"&gt;memory debugger&lt;/a&gt; tools may be needed.\nIn certain situations, general purpose software tools that are language specific in nature can be very useful. These take the form of \"&lt;a href=\"list%20of%20tools%20for%20static%20code%20analysis\"&gt;static code analysis tools&lt;/a&gt;\". These tools look for a very specific set of known problems, some common and some rare, within the source code, concentrating more on the semantics (e.g. data flow) rather than the syntax, as compilers and interpreters do.\nBoth commercial and free tools exist for various languages; some claim to be able to detect hundreds of different problems. These tools can be extremely useful when checking very large source trees, where it is impractical to do code walk-throughs. A typical example of a problem detected would be a variable dereference that occurs \"before\" the variable is assigned a value. As another example, some such tools perform strong type checking when the language does not require it. Thus, they are better at locating likely errors in code that is syntactically correct. But these tools have a reputation of false positives, where correct code is flagged as dubious. The old Unix \"&lt;a href=\"lint%20%28software%29\"&gt;lint&lt;/a&gt;\" program is an early example.\nFor debugging electronic hardware (e.g., &lt;a href=\"computer%20hardware\"&gt;computer hardware&lt;/a&gt;) as well as low-level software (e.g., &lt;a href=\"BIOS\"&gt;BIOS&lt;/a&gt;es, &lt;a href=\"device%20driver\"&gt;device driver&lt;/a&gt;s) and &lt;a href=\"firmware\"&gt;firmware&lt;/a&gt;, instruments such as &lt;a href=\"oscilloscope\"&gt;oscilloscope&lt;/a&gt;s, &lt;a href=\"logic%20analyzer\"&gt;logic analyzer&lt;/a&gt;s, or &lt;a href=\"in-circuit%20emulator\"&gt;in-circuit emulator&lt;/a&gt;s (ICEs) are often used, alone or in combination. An ICE may perform many of the typical software debugger's tasks on low-level &lt;a href=\"software\"&gt;software&lt;/a&gt; and &lt;a href=\"firmware\"&gt;firmware&lt;/a&gt;.\nDebugging process.\nNormally the first step in debugging is to attempt to reproduce the problem. This can be a non-trivial task, for example as with &lt;a href=\"parallel%20computing\"&gt;parallel processes&lt;/a&gt; and some &lt;a href=\"Heisenbug\"&gt;Heisenbug&lt;/a&gt;s. Also, specific user environment and usage history can make it difficult to reproduce the problem.\nAfter the bug is reproduced, the input of the program may need to be simplified to make it easier to debug. For example, a bug in a compiler can make it &lt;a href=\"crash%20%28computing%29\"&gt;crash&lt;/a&gt; when parsing some large source file. However, after simplification of the test case, only few lines from the original source file can be sufficient to reproduce the same crash. Such simplification can be made manually, using a &lt;a href=\"divide-and-conquer%20algorithm\"&gt;divide-and-conquer&lt;/a&gt; approach. The programmer will try to remove some parts of original test case and check if the problem still exists. When debugging the problem in a &lt;a href=\"graphical%20user%20interface\"&gt;GUI&lt;/a&gt;, the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.\nAfter the test case is sufficiently simplified, a programmer can use a debugger tool to examine program states (values of variables, plus the &lt;a href=\"call%20stack\"&gt;call stack&lt;/a&gt;) and track down the origin of the . Alternatively, &lt;a href=\"tracing%20%28software%29\"&gt;tracing&lt;/a&gt; can be used. In simple cases, tracing is just a few print statements, which output the values of variables at certain points of program execution.\nDebugging for embedded systems.\nIn contrast to the general purpose computer software design environment, a primary characteristic of embedded environments is the sheer number of different platforms available to the developers (CPU architectures, vendors, operating systems, and their variants). Embedded systems are, by definition, not general-purpose designs: they are typically developed for a single task (or small range of tasks), and the platform is chosen specifically to optimize that application. Not only does this fact make life tough for embedded system developers, it also makes debugging and testing of these systems harder as well, since different debugging tools are needed for different platforms.\nDespite the challenge of heterogeneity mentioned above, some debuggers have been developed commercially as well as research prototypes. Examples of commercial solutions come from &lt;a href=\"Green%20Hills%20Software\"&gt;Green Hills Software&lt;/a&gt;, &lt;a href=\"Lauterbach%20GmbH\"&gt;Lauterbach GmbH&lt;/a&gt; and Microchip's MPLAB-ICD (for in-circuit debugger). Two examples of research prototype tools are Aveksha and Flocklab. They all leverage a functionality available on low-cost embedded processors, an On-Chip Debug Module (OCDM), whose signals are exposed through a standard &lt;a href=\"JTAG\"&gt;JTAG interface&lt;/a&gt;. They are benchmarked based on how much change to the application is needed and the rate of events that they can keep up with.\nIn addition to the typical task of identifying bugs in the system, embedded system debugging also seeks to collect information about the operating states of the system that may then be used to analyze the system: to find ways to boost its performance or to optimize other important characteristics (e.g. energy consumption, reliability, real-time response, etc.).\nAnti-debugging.\nAnti-debugging is \"the implementation of one or more techniques within computer code that hinders attempts at &lt;a href=\"reverse%20engineering\"&gt;reverse engineering&lt;/a&gt; or debugging a target process\". It is actively used by recognized publishers in &lt;a href=\"copy%20protection\"&gt;copy-protection&lt;/a&gt; schemas, but is also used by &lt;a href=\"malware\"&gt;malware&lt;/a&gt; to complicate its detection and elimination. Techniques used in anti-debugging include:\nAn early example of anti-debugging existed in early versions of &lt;a href=\"Microsoft%20Word\"&gt;Microsoft Word&lt;/a&gt; which, if a debugger was detected, produced a message that said, \"The tree of evil bears bitter fruit. Now trashing program disk.\", after which it caused the floppy disk drive to emit alarming noises with the intent of scaring the user away from attempting it again."
}