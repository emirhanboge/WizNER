{
    "id": "888587",
    "revid": "7903804",
    "url": "https://en.wikipedia.org/wiki?curid=888587",
    "title": "Quantum logic gate",
    "text": "In &lt;a href=\"quantum%20computing\"&gt;quantum computing&lt;/a&gt; and specifically the &lt;a href=\"quantum%20circuit\"&gt;quantum circuit&lt;/a&gt; &lt;a href=\"model%20of%20computation\"&gt;model of computation&lt;/a&gt;, a quantum logic gate (or simply quantum gate) is a basic quantum circuit operating on a small number of &lt;a href=\"qubit\"&gt;qubit&lt;/a&gt;s. They are the building blocks of quantum circuits, like classical &lt;a href=\"logic%20gate\"&gt;logic gate&lt;/a&gt;s are for conventional digital circuits.\nUnlike many classical logic gates, quantum logic gates are &lt;a href=\"reversible%20computing\"&gt;reversible&lt;/a&gt;. However, it is possible to perform classical computing using only reversible gates. For example, the reversible &lt;a href=\"Toffoli%20gate\"&gt;Toffoli gate&lt;/a&gt; can implement all Boolean functions, often at the cost of having to use &lt;a href=\"ancilla%20bit\"&gt;ancilla bit&lt;/a&gt;s. The Toffoli gate has a direct quantum equivalent, showing that quantum circuits can perform all operations performed by classical circuits.\nQuantum gates are &lt;a href=\"unitary%20operators\"&gt;unitary operators&lt;/a&gt;, and are described as &lt;a href=\"unitary%20matrix\"&gt;unitary matrices&lt;/a&gt; relative to some &lt;a href=\"Basis%20%28linear%20algebra%29\"&gt;basis&lt;/a&gt;. Usually we use the \"computational basis\", which unless we compare it with something, just means that for a \"d\"-level quantum system (such as a &lt;a href=\"qubit\"&gt;qubit&lt;/a&gt;, a &lt;a href=\"quantum%20register\"&gt;quantum register&lt;/a&gt;, or &lt;a href=\"qutrit\"&gt;qutrit&lt;/a&gt;s and &lt;a href=\"qudit\"&gt;qudit&lt;/a&gt;s) we have labeled the orthogonal basis vectors or use &lt;a href=\"Binary%20number\"&gt;binary notation&lt;/a&gt;.\nHistory.\n The current notation for quantum gates was developed by many of the founders of quantum information science including Adriano Barenco, &lt;a href=\"Charles%20H.%20Bennett%20%28physicist%29\"&gt;Charles Bennett&lt;/a&gt;, &lt;a href=\"Richard%20Cleve\"&gt;Richard Cleve&lt;/a&gt;, &lt;a href=\"David%20P.%20DiVincenzo\"&gt;David P. DiVincenzo&lt;/a&gt;, &lt;a href=\"Norman%20Margolus\"&gt;Norman Margolus&lt;/a&gt;, &lt;a href=\"Peter%20Shor\"&gt;Peter Shor&lt;/a&gt;, Tycho Sleator, &lt;a href=\"John%20A.%20Smolin\"&gt;John A. Smolin&lt;/a&gt;, and Harald Weinfurter, building on notation introduced by &lt;a href=\"Richard%20Feynman\"&gt;Richard Feynman&lt;/a&gt;.\nRepresentation.\nQuantum logic gates are represented by &lt;a href=\"unitary%20matrix\"&gt;unitary matrices&lt;/a&gt;. A gate which acts on formula_1 &lt;a href=\"qubit\"&gt;qubit&lt;/a&gt;s is represented by a formula_2 unitary matrix, and the &lt;a href=\"Set%20%28mathematics%29\"&gt;set&lt;/a&gt; of all such gates with the group operation of &lt;a href=\"matrix%20multiplication\"&gt;matrix multiplication&lt;/a&gt; is the &lt;a href=\"symmetry%20group\"&gt;symmetry group&lt;/a&gt; &lt;a href=\"unitary%20group\"&gt;U(2\"n\")&lt;/a&gt;. The &lt;a href=\"quantum%20state\"&gt;quantum state&lt;/a&gt;s that the gates act upon are &lt;a href=\"unit%20vector\"&gt;unit vector&lt;/a&gt;s in formula_3 &lt;a href=\"complex%20number\"&gt;complex&lt;/a&gt; dimensions, with the &lt;a href=\"Norm_%28mathematics%29%23Euclidean_norm_of_complex_numbers\"&gt;complex Euclidean norm&lt;/a&gt; (the &lt;a href=\"Norm_%28mathematics%29%23p-norm\"&gt;2-norm&lt;/a&gt;). The &lt;a href=\"basis%20vectors\"&gt;basis vectors&lt;/a&gt; (sometimes called \"&lt;a href=\"eigenstate\"&gt;eigenstate&lt;/a&gt;s\") are the possible outcomes if &lt;a href=\"Quantum%20measurement\"&gt;measured&lt;/a&gt;, and a quantum state is a &lt;a href=\"linear%20combination\"&gt;linear combination&lt;/a&gt; of these outcomes. The most common quantum gates operate on &lt;a href=\"vector%20space\"&gt;vector space&lt;/a&gt;s of one or two qubits, just like the common &lt;a href=\"Logic%20gate\"&gt;classical logic gate&lt;/a&gt;s operate on one or two &lt;a href=\"bit\"&gt;bit&lt;/a&gt;s.\nEven though the quantum logic gates belong to a &lt;a href=\"continuous%20symmetry\"&gt;continuous symmetry group&lt;/a&gt;, real hardware is inexact and thus limited in precision. The application of gates typically introduces errors, and the &lt;a href=\"Fidelity%20of%20quantum%20states\"&gt;quantum states fidelities&lt;/a&gt; decreases over time. If &lt;a href=\"Quantum%20error%20correction\"&gt;error correction&lt;/a&gt; is used, the usable gates are further restricted to a finite set. Later in this article, this is sometimes ignored as focus lies on the quantum gates' mathematical properties.\nQuantum states are typically represented by \"kets\", from a notation known as &lt;a href=\"Bra%E2%80%93ket%20notation\"&gt;bra-ket&lt;/a&gt;.\nThe vector representation of a single qubit is:\nHere, formula_5 and formula_6 are the complex &lt;a href=\"probability%20amplitude\"&gt;probability amplitude&lt;/a&gt;s of the qubit. These values determine the probability of measuring a 0 or a 1, when measuring the state of the qubit. See &lt;a href=\"%23Measurement\"&gt;measurement&lt;/a&gt; below for details.\nThe value zero is represented by the ket and the value one is represented by the ket \nThe &lt;a href=\"tensor%20product\"&gt;tensor product&lt;/a&gt; (or &lt;a href=\"Kronecker%20product\"&gt;Kronecker product&lt;/a&gt;) is used to combine quantum states. The combined state of two qubits is the tensor product of the two qubits. The tensor product is denoted by the symbol \nThe vector representation of two qubits is:\nThe action of the gate on a specific quantum state is found by &lt;a href=\"Matrix%20multiplication\"&gt;multiplying&lt;/a&gt; the vector formula_8 which represents the state by the matrix formula_9 representing the gate. The result is a new quantum state \nNotable examples.\nThere exists an &lt;a href=\"Uncountable%20set\"&gt;uncountably infinite&lt;/a&gt; number of gates. Some of them have been named by various authors, and below follow some of those most often used in the literature.\nIdentity gate.\nThe identity gate is the &lt;a href=\"identity%20matrix\"&gt;identity matrix&lt;/a&gt;, usually written as \"I\", and is defined for a single qubit as\nwhere \"I\" is basis independent and does not modify the quantum state. The identity gate is most useful when describing mathematically the result of various gate operations or when discussing multi-qubit circuits.\nPauli gates (\"X\",\"Y\",\"Z\").\nThe Pauli gates formula_12 are the three &lt;a href=\"Pauli%20matrices\"&gt;Pauli matrices&lt;/a&gt; formula_13 and act on a single qubit. The Pauli \"X\",\"Y\" and \"Z\" equate, respectively, to a rotation around the \"x\", \"y\" and \"z\" axes of the &lt;a href=\"Bloch%20sphere\"&gt;Bloch sphere&lt;/a&gt; by formula_14 radians. \nThe Pauli-\"X\" gate is the quantum equivalent of the &lt;a href=\"NOT%20gate\"&gt;NOT gate&lt;/a&gt; for classical computers with respect to the standard basis which distinguishes the \"z\"-axis on the &lt;a href=\"Bloch%20sphere\"&gt;Bloch sphere&lt;/a&gt;. It is sometimes called a bit-flip as it maps formula_15 to formula_16 and formula_16 to formula_15. Similarly, the Pauli-\"Y\" maps formula_15 to formula_20 and formula_16 to . Pauli \"Z\" leaves the basis state formula_15 unchanged and maps formula_16 to Due to this nature, it is sometimes called phase-flip.\nThese matrices are usually represented as\nThe Pauli matrices are &lt;a href=\"Involutory%20matrix\"&gt;involutory&lt;/a&gt;, meaning that the square of a Pauli matrix is the &lt;a href=\"identity%20matrix\"&gt;identity matrix&lt;/a&gt;.\nThe Pauli matrices also &lt;a href=\"Anticommutative%20property\"&gt;anti-commute&lt;/a&gt;, for example formula_28 .\nSquare root of NOT gate ().\nThe square root of NOT gate (or square root of Pauli-\"X\", acts on a single qubit. It maps the basis state formula_15 to formula_30 and formula_16 to formula_32. In matrix form it is given by \nsuch that\nThis operation represents a rotation of about the \"x\"-axis at the Bloch sphere.\nControlled gates.\nControlled gates act on 2 or more qubits, where one or more qubits act as a control for some operation. For example, the &lt;a href=\"controlled%20NOT%20gate\"&gt;controlled NOT gate&lt;/a&gt; (or CNOT or CX) acts on 2 qubits, and performs the NOT operation on the second qubit only when the first qubit is and otherwise leaves it unchanged. With respect to the basis it is represented by the matrix:\nThe CNOT (or controlled Pauli-\"X\") gate can be described as the gate that maps the basis states formula_36, where formula_37 is &lt;a href=\"Exclusive%20or\"&gt;XOR&lt;/a&gt;.\nMore generally if \"U\" is a gate that operates on a single qubit with matrix representation\nthen the \"controlled-U gate\" is a gate that operates on two qubits in such a way that the first qubit serves as a control. It maps the basis states as follows.\nThe matrix representing the controlled \"U\" is\nWhen \"U\" is one of the Pauli operators, \"X\",\"Y\", \"Z\", the respective terms \"controlled-\"X\"\", \"controlled-\"Y\"\", or \"controlled-\"Z\"\" are sometimes used. Sometimes this is shortened to just C\"X\", C\"Y\" and C\"Z\".\nControl can be extended to gates with arbitrary number of qubits and functions in programming languages.\nA controlled function or gate behaves conceptually differently depending on whether one approaches it from \"before measurement\", or \"after measurement\": From the perspective of \"before measurement\", the controlled function simultaneously executes on all those basis states, of a &lt;a href=\"Quantum%20superposition\"&gt;superposition&lt;/a&gt; (i.e. &lt;a href=\"linear%20combination\"&gt;linear combination&lt;/a&gt;) of possible outcomes, that match the controls. If one instead approaches it from the perspective of \"after measurement\", the controlled function has either executed, or not, depending on which basis state that was measured.\nPhase shift gates.\nThe phase shift is a family of single-qubit gates that map the basis states formula_44 and formula_45. The probability of measuring a formula_15 or formula_16 is unchanged after applying this gate, however it modifies the phase of the quantum state. This is equivalent to tracing a horizontal circle (a line of latitude) on the &lt;a href=\"Bloch%20sphere\"&gt;Bloch sphere&lt;/a&gt; by formula_48 radians. The phase shift gate is represented by the matrix:\nwhere formula_48 is the \"phase shift\" with the &lt;a href=\"Periodic%20function\"&gt;period&lt;/a&gt; . Some common examples are the \"T\" gate where formula_51, the phase gate (written \"S\", though \"S\" is sometimes used for SWAP gates) where formula_52 and the &lt;a href=\"%23Z\"&gt;Pauli-\"Z\" gate&lt;/a&gt; where formula_53.\nThe phase shift gates are related to each other as follows:\nThe argument to the phase shift gate is in &lt;a href=\"U%281%29\"&gt;U(1)&lt;/a&gt;, and the gate performs a phase rotation in U(1) along the specified basis state (e.g. formula_59 rotates the phase about . Extending formula_59 to a rotation about a generic phase of both basis states of a 2-level quantum system (a &lt;a href=\"qubit\"&gt;qubit&lt;/a&gt;) can be done with a &lt;a href=\"%23Serially%20wired%20gates\"&gt;series circuit&lt;/a&gt;: formula_61. When formula_62 this gate is the &lt;a href=\"%23Rotation%20operator%20gates\"&gt;rotation operator&lt;/a&gt; formula_63 gate.\nIntroducing the global phase gate formula_64 we also have the identity formula_65.\nArbitrary single-qubit phase shift gates formula_59 are natively available for &lt;a href=\"transmon\"&gt;transmon&lt;/a&gt; quantum processors through timing of microwave control pulses. It can be explained in terms of &lt;a href=\"Unitary_transformation_%28quantum_mechanics%29\"&gt;change of frame&lt;/a&gt;.\nControlled phase shift.\nThe 2-qubit controlled phase shift gate is:\nWith respect to the computational basis, it shifts the phase with formula_48 only if it acts on the state formula_69:\nThe &lt;a href=\"%23CZ\"&gt;CZ gate&lt;/a&gt; is the special case where formula_53.\nRotation operator gates.\nThe rotation operator gates formula_72 and formula_73 are the analog &lt;a href=\"Rotation%20matrix\"&gt;rotation matrices&lt;/a&gt; in three &lt;a href=\"Cartesian%20axes\"&gt;Cartesian axes&lt;/a&gt; of &lt;a href=\"SO%283%29\"&gt;SO(3)&lt;/a&gt;, the axes on the &lt;a href=\"Bloch%20sphere\"&gt;Bloch sphere&lt;/a&gt; projection:\nAs Pauli matrices are related to the &lt;a href=\"Generator%20%28mathematics%29\"&gt;generator&lt;/a&gt; of rotations, these rotation operators can be written as &lt;a href=\"matrix%20exponential\"&gt;matrix exponential&lt;/a&gt;s with &lt;a href=\"%23Pauli%20gates%20%28X%2CY%2CZ%29\"&gt;Pauli matrices&lt;/a&gt; in the argument. Any formula_77 &lt;a href=\"unitary%20matrix\"&gt;unitary matrix&lt;/a&gt; in &lt;a href=\"SU%282%29\"&gt;SU(2)&lt;/a&gt; can be written as a product (i.e. &lt;a href=\"%23Serially%20wired%20gates\"&gt;series circuit&lt;/a&gt;) of three rotation gates or less. Note that for two-level systems such as qubits and &lt;a href=\"spinor\"&gt;spinor&lt;/a&gt;s, these rotations have a period of . A rotation of (360 degrees) returns the same statevector with a different &lt;a href=\"phase%20factor\"&gt;phase&lt;/a&gt;.\nWe also have formula_78 and formula_79 for all formula_80\nThe rotation matrices are related to the Pauli matrices in the following way : formula_81\nSimilar rotation operator gates exist for &lt;a href=\"SU%283%29\"&gt;SU(3)&lt;/a&gt;. They are the rotation operators used with &lt;a href=\"qutrit%23Qutrit%20quantum%20gates\"&gt;qutrits&lt;/a&gt;.\nHadamard gate.\nThe Hadamard gate () acts on a single qubit. It maps the basis states formula_82\nImaginary swap (iSWAP).\nFor systems with Ising like interactions, it is sometimes more natural to introduce the imaginary swap or iSWAP gate defined as\nwhere its squared root version is given by\nNote that formula_87 and formula_88 &lt;a href=\"Commutative%20property\"&gt;commute&lt;/a&gt;, so formula_89 and formula_90, or more generally formula_91 for all real \"n\" except 0.\nDeutsch gate.\nThe Deutsch (or formula_92) gate, named after physicist &lt;a href=\"David%20Deutsch\"&gt;David Deutsch&lt;/a&gt; is a three-qubit gate. It is defined as\nUnfortunately, a working Deutsch gate has remained out of reach, due to lack of a protocol. There are some proposals to realize a Deutsch gate with dipole-dipole interaction in neutral atoms.\nUniversal quantum gates.\nA set of universal quantum gates is any set of gates to which any operation possible on a quantum computer can be reduced, that is, any other unitary operation can be expressed as a finite sequence of gates from the set. Technically, this is impossible with anything less than an &lt;a href=\"uncountable\"&gt;uncountable&lt;/a&gt; set of gates since the number of possible quantum gates is uncountable, whereas the number of finite sequences from a finite set is &lt;a href=\"countable\"&gt;countable&lt;/a&gt;. To solve this problem, we only require that any quantum operation can be approximated by a sequence of gates from this finite set. Moreover, for &lt;a href=\"Unitary%20transformation%20%28quantum%20mechanics%29\"&gt;unitaries&lt;/a&gt; on a constant number of qubits, the &lt;a href=\"Solovay%E2%80%93Kitaev%20theorem\"&gt;Solovay\u2013Kitaev theorem&lt;/a&gt; guarantees that this can be done efficiently.\nThe &lt;a href=\"%23Rotation%20operator%20gates\"&gt;rotation operators&lt;/a&gt; , , , the &lt;a href=\"%23Phase%20shift%20gates\"&gt;phase shift gate&lt;/a&gt; and &lt;a href=\"%23CNOT\"&gt;CNOT&lt;/a&gt; form a widely used universal set of quantum gates.\nA common universal gate set is the &lt;a href=\"Clifford%20gates\"&gt;Clifford&lt;/a&gt; + \"T\" gate set, which is composed of the CNOT, \"H\", \"S\" and \"T\" gates. The Clifford set alone is not universal and can be efficiently simulated classically by the &lt;a href=\"Gottesman%E2%80%93Knill%20theorem\"&gt;Gottesman\u2013Knill theorem&lt;/a&gt;.\nThe &lt;a href=\"Toffoli%20gate\"&gt;Toffoli gate&lt;/a&gt; forms a set of universal gates for reversible &lt;a href=\"boolean%20algebra\"&gt;boolean algebraic&lt;/a&gt; logic circuits. A two-gate set of universal quantum gates containing a Toffoli gate can be constructed by adding the Hadamard gate to the set.\nA single-gate set of universal quantum gates can also be formulated using the three-qubit &lt;a href=\"%23Deutsch%20gate\"&gt;Deutsch gate&lt;/a&gt; formula_94.\nA universal logic gate for reversible classical computing, the Toffoli gate, is reducible to the Deutsch gate, formula_95, thus showing that all reversible classical logic operations can be performed on a universal quantum computer.\nThere also exists a single two-qubit gate sufficient for universality, given it can be applied to any pairs of qubits formula_96 on a circuit of width formula_1.\nCircuit composition.\nSerially wired gates.\nAssume that we have two gates \"A\" and \"B\", that both act on formula_1 qubits. When \"B\" is put after \"A\" in a series circuit, then the effect of the two gates can be described as a single gate \"C\".\nWhere formula_100 is &lt;a href=\"Matrix%20multiplication%23Definition\"&gt;matrix multiplication&lt;/a&gt;. The resulting gate \"C\" will have the same dimensions as \"A\" and \"B\". The order in which the gates would appear in a circuit diagram is reversed when multiplying them together.\nFor example, putting the Pauli \"X\" gate after the Pauli \"Y\" gate, both of which act on a single qubit, can be described as a single combined gate \"C\":\nThe product symbol (formula_100) is often omitted.\nExponents of quantum gates.\nAll &lt;a href=\"real%20number\"&gt;real&lt;/a&gt; exponents of &lt;a href=\"unitary%20matrix\"&gt;unitary matrices&lt;/a&gt; are also unitary matrices, and all quantum gates are unitary matrices.\nPositive integer exponents are equivalent to sequences of serially wired gates (e.g. and the real exponents is a generalization of the series circuit. For example, formula_103 and formula_104 are both valid quantum gates.\nformula_105 for any unitary matrix formula_9. The &lt;a href=\"identity%20matrix\"&gt;identity matrix&lt;/a&gt; (formula_107) behaves like a &lt;a href=\"NOP%20%28code%29\"&gt;NOP&lt;/a&gt; and can be represented as bare wire in quantum circuits, or not shown at all.\nAll gates are unitary matrices, so that formula_108 and where formula_109 is the &lt;a href=\"conjugate%20transpose\"&gt;conjugate transpose&lt;/a&gt;. This means that negative exponents of gates are &lt;a href=\"%23Unitary%20inversion%20of%20gates\"&gt;unitary inverses&lt;/a&gt; of their positively exponentiated counterparts: For example, some negative exponents of the &lt;a href=\"%23Phase%20gate\"&gt;phase shift gates&lt;/a&gt; are formula_110 and \nParallel gates.\nThe &lt;a href=\"Tensor%20product%23Tensor%20product%20of%20linear%20maps\"&gt;tensor product&lt;/a&gt; (or &lt;a href=\"Kronecker%20product\"&gt;Kronecker product&lt;/a&gt;) of two quantum gates is the gate that is equal to the two gates in parallel.\nIf we, as in the picture, combine the Pauli-\"Y\" gate with the Pauli-\"X\" gate in parallel, then this can be written as:\nBoth the Pauli-\"X\" and the Pauli-\"Y\" gate act on a single qubit. The resulting gate formula_112 act on two qubits.\nHadamard transform.\nThe gate formula_113 is the &lt;a href=\"%23Hadamard%20gate\"&gt;Hadamard gate&lt;/a&gt; applied in parallel on 2 qubits. It can be written as:\nThis \"two-qubit parallel Hadamard gate\" will when applied to, for example, the two-qubit zero-vector create a quantum state that have equal probability of being observed in any of its four possible outcomes; and We can write this operation as:\nHere the amplitude for each measurable state is . The probability to observe any state is the square of the absolute value of the measurable states amplitude, which in the above example means that there is one in four that we observe any one of the individual four cases. See &lt;a href=\"%23Measurement\"&gt;measurement&lt;/a&gt; for details.\nformula_116 performs the &lt;a href=\"Hadamard%20transform\"&gt;Hadamard transform&lt;/a&gt; on two qubits. Similarly the gate formula_117 performs a Hadamard transform on a &lt;a href=\"quantum%20register\"&gt;register&lt;/a&gt; of formula_1 qubits.\nWhen applied to a register of formula_1 qubits all initialized to the Hadamard transform puts the quantum register into a superposition with equal probability of being measured in any of its formula_3 possible states:\nThis state is a \"uniform superposition\" and it is generated as the first step in some search algorithms, for example in &lt;a href=\"amplitude%20amplification\"&gt;amplitude amplification&lt;/a&gt; and &lt;a href=\"Quantum%20phase%20estimation%20algorithm\"&gt;phase estimation&lt;/a&gt;.\n&lt;a href=\"%23Measurement\"&gt;Measuring&lt;/a&gt; this state results in a &lt;a href=\"Random%20number%20generation\"&gt;random number&lt;/a&gt; between formula_15 and How random the number is depends on the &lt;a href=\"Quantum%20fidelity\"&gt;fidelity&lt;/a&gt; of the logic gates. If not measured, it is a quantum state with equal &lt;a href=\"probability%20amplitude\"&gt;probability amplitude&lt;/a&gt; formula_123 for each of its possible states.\nThe Hadamard transform acts on a register formula_124 with formula_1 qubits such that formula_126 as follows:\nApplication on entangled states.\nIf two or more qubits are viewed as a single quantum state, this combined state is equal to the tensor product of the constituent qubits. Any state that can be written as a tensor product from the constituent subsystems are called separable states. On the other hand, an &lt;a href=\"Quantum%20entanglement\"&gt;entangled state&lt;/a&gt; is any state that cannot be tensor-factorized, or in other words: \"An entangled state can not be written as a tensor product of its constituent qubits states.\" Special care must be taken when applying gates to constituent qubits that make up entangled states.\nIf we have a set of \"N\" qubits that are entangled and wish to apply a quantum gate on \"M\" &lt; \"N\" qubits in the set, we will have to extend the gate to take \"N\" qubits. This application can be done by combining the gate with an &lt;a href=\"identity%20matrix\"&gt;identity matrix&lt;/a&gt; such that their tensor product becomes a gate that act on \"N\" qubits. The identity matrix is a representation of the gate that maps every state to itself (i.e., does nothing at all). In a circuit diagram the identity gate or matrix will often appear as just a bare wire.\nFor example, the Hadamard gate acts on a single qubit, but if we feed it the first of the two qubits that constitute the &lt;a href=\"quantum%20entanglement\"&gt;entangled&lt;/a&gt; &lt;a href=\"Bell%20state\"&gt;Bell state&lt;/a&gt; &lt;/math&gt;,}} we cannot write that operation easily. We need to extend the Hadamard gate formula_128 with the identity gate formula_107 so that we can act on quantum states that span \"two\" qubits:\nThe gate formula_131 can now be applied to any two-qubit state, entangled or otherwise. The gate formula_131 will leave the second qubit untouched and apply the Hadamard transform to the first qubit. If applied to the Bell state in our example, we may write that as:\nComputational complexity and the tensor product.\nThe &lt;a href=\"Computational%20complexity%20of%20matrix%20multiplication\"&gt;time complexity for multiplying&lt;/a&gt; two formula_134-matrices is at least if using a classical machine. Because the size of a gate that operates on formula_135 qubits is formula_136 it means that the time for simulating a step in a quantum circuit (by means of multiplying the gates) that operates on generic entangled states is For this reason it is believed to be &lt;a href=\"Computational%20complexity%20theory%23Intractability\"&gt;intractable&lt;/a&gt; to simulate large entangled quantum systems using classical computers. Subsets of the gates, such as the &lt;a href=\"Clifford%20gates\"&gt;Clifford gates&lt;/a&gt;, or the trivial case of circuits that only implement classical boolean functions (e.g. combinations of &lt;a href=\"%23X\"&gt;X&lt;/a&gt;, &lt;a href=\"%23CNOT\"&gt;CNOT&lt;/a&gt;, &lt;a href=\"%23Toffoli\"&gt;Toffoli&lt;/a&gt;), can however be efficiently simulated on classical computers.\nThe state vector of a &lt;a href=\"quantum%20register\"&gt;quantum register&lt;/a&gt; with formula_1 qubits is formula_3 complex entries. Storing the &lt;a href=\"probability%20amplitude\"&gt;probability amplitude&lt;/a&gt;s as a list of &lt;a href=\"Floating-point%20arithmetic\"&gt;floating point&lt;/a&gt; values is not tractable for large formula_1.\nUnitary inversion of gates.\nBecause all quantum logical gates are &lt;a href=\"reversible%20computing\"&gt;reversible&lt;/a&gt;, any composition of multiple gates is also reversible. All products and tensor products (i.e. &lt;a href=\"%23Serially%20wired%20gates\"&gt;series&lt;/a&gt; and &lt;a href=\"%23Parallel%20gates\"&gt;parallel&lt;/a&gt; combinations) of &lt;a href=\"unitary%20matrix\"&gt;unitary matrices&lt;/a&gt; are also unitary matrices. This means that it is possible to construct an inverse of all algorithms and functions, as long as they contain only gates.\nInitialization, measurement, &lt;a href=\"Input/Output\"&gt;I/O&lt;/a&gt; and spontaneous &lt;a href=\"quantum%20decoherence\"&gt;decoherence&lt;/a&gt; are &lt;a href=\"Side%20effect%20%28computer%20science%29\"&gt;side effects&lt;/a&gt; in quantum computers. Gates however are &lt;a href=\"pure%20function\"&gt;purely functional&lt;/a&gt; and &lt;a href=\"bijective\"&gt;bijective&lt;/a&gt;.\nIf formula_9 is a &lt;a href=\"unitary%20matrix\"&gt;unitary matrix&lt;/a&gt;, then formula_108 and The dagger (formula_109) denotes the &lt;a href=\"conjugate%20transpose\"&gt;conjugate transpose&lt;/a&gt;. It is also called the &lt;a href=\"Hermitian%20adjoint\"&gt;Hermitian adjoint&lt;/a&gt;.\nIf a function formula_143 is a product of formula_144 gates, the unitary inverse of the function formula_145 can be constructed:\nBecause formula_146 we have, after repeated application on itself\nGates that are their own unitary inverses are called &lt;a href=\"Hermitian%20matrix\"&gt;Hermitian&lt;/a&gt; or &lt;a href=\"self-adjoint%20operator\"&gt;self-adjoint operator&lt;/a&gt;s. Some elementary gates such as the &lt;a href=\"%23Hadamard\"&gt;Hadamard&lt;/a&gt; (\"H\") and the &lt;a href=\"Pauli%20matrices\"&gt;Pauli gates&lt;/a&gt; (\"I\", \"X\", \"Y\", \"Z\") are Hermitian operators, while others like the &lt;a href=\"%23Phase%20shift\"&gt;phase shift&lt;/a&gt; (\"S\", \"T\", \"P\", CPHASE) gates generally are not. Gates that are not Hermitian are called &lt;a href=\"Skew-Hermitian%20matrix\"&gt;skew-Hermitian&lt;/a&gt;, or &lt;a href=\"Hermitian%20adjoint\"&gt;adjoint operators&lt;/a&gt;.\nFor example, an algorithm for addition can be used for subtraction, if it is being \"run in reverse\", as its unitary inverse. The &lt;a href=\"Quantum%20Fourier%20transform%23Unitarity\"&gt;inverse quantum fourier transform&lt;/a&gt; is the unitary inverse. Unitary inverses can also be used for &lt;a href=\"uncomputation\"&gt;uncomputation&lt;/a&gt;. Programming languages for quantum computers, such as &lt;a href=\"Microsoft\"&gt;Microsoft&lt;/a&gt;'s &lt;a href=\"Q%20Sharp\"&gt;Q#&lt;/a&gt; and Bernhard \u00d6mer's &lt;a href=\"Quantum%20Computation%20Language\"&gt;QCL&lt;/a&gt;, contain function inversion as programming concepts.\nMeasurement.\nMeasurement (sometimes called \"observation\") is irreversible and therefore not a quantum gate, because it assigns the observed quantum state to a single value. Measurement takes a quantum state and projects it to one of the &lt;a href=\"basis%20vector\"&gt;basis vector&lt;/a&gt;s, with a likelihood equal to the square of the vector's length (in the &lt;a href=\"Norm_%28mathematics%29%23p-norm\"&gt;2-norm&lt;/a&gt;) along that basis vector. This is known as the &lt;a href=\"Born%20rule\"&gt;Born rule&lt;/a&gt; and appears as a &lt;a href=\"stochastic\"&gt;stochastic&lt;/a&gt; non-reversible operation as it probabilistically sets the quantum state equal to the basis vector that represents the measured state. At the instant of measurement, the state is said to \"&lt;a href=\"Wave%20function%20collapse\"&gt;collapse&lt;/a&gt;\" to the definite single value that was measured. Why and how, or even if the quantum state collapses at measurement, is called the &lt;a href=\"measurement%20problem\"&gt;measurement problem&lt;/a&gt;.\nThe probability of measuring a value with &lt;a href=\"probability%20amplitude\"&gt;probability amplitude&lt;/a&gt; formula_151 is where formula_152 is the &lt;a href=\"Absolute%20value%23Complex%20numbers\"&gt;modulus&lt;/a&gt;.\nMeasuring a single qubit, whose quantum state is represented by the vector will result in formula_15 with probability and in \nFor example, measuring a qubit with the quantum state formula_154 will yield with equal probability either formula_15 or \nA quantum state formula_156 that spans qubits can be written as a vector in formula_3 &lt;a href=\"Complex%20number\"&gt;complex&lt;/a&gt; dimensions: This is because the tensor product of qubits is a vector in formula_3 dimensions. This way, a &lt;a href=\"quantum%20register\"&gt;register&lt;/a&gt; of qubits can be measured to formula_3 distinct states, similar to how a register of classical &lt;a href=\"bit\"&gt;bit&lt;/a&gt;s can hold formula_3 distinct states. Unlike with the bits of classical computers, quantum states can have non-zero probability amplitudes in multiple measurable values simultaneously. This is called \"superposition\".\nThe sum of all probabilities for all outcomes must always be equal to . Another way to say this is that the &lt;a href=\"Pythagorean%20theorem\"&gt;Pythagorean theorem&lt;/a&gt; generalized to formula_161 has that all quantum states formula_156 with qubits must satisfy where formula_163 is the probability amplitude for measurable state A geometric interpretation of this is that the possible &lt;a href=\"State%20space\"&gt;value-space&lt;/a&gt; of a quantum state formula_156 with qubits is the surface of a &lt;a href=\"unit%20sphere\"&gt;unit sphere&lt;/a&gt; in formula_161 and that the &lt;a href=\"Unitary%20transformation\"&gt;unitary transform&lt;/a&gt;s (i.e. quantum logic gates) applied to it are rotations on the sphere. The rotations that the gates perform is in the &lt;a href=\"symmetry%20group\"&gt;symmetry group&lt;/a&gt; &lt;a href=\"unitary%20group\"&gt;U(2n)&lt;/a&gt;. Measurement is then a probabilistic projection of the points at the surface of this &lt;a href=\"complex%20number\"&gt;complex&lt;/a&gt; sphere onto the &lt;a href=\"basis%20vector\"&gt;basis vector&lt;/a&gt;s that span the space (and labels the outcomes).\nIn many cases the space is represented as a &lt;a href=\"Hilbert%20space\"&gt;Hilbert space&lt;/a&gt; formula_166 rather than some specific complex space. The number of dimensions (defined by the basis vectors, and thus also the possible outcomes from measurement) is then often implied by the operands, for example as the required &lt;a href=\"state%20space\"&gt;state space&lt;/a&gt; for solving a &lt;a href=\"Computational%20problem\"&gt;problem&lt;/a&gt;. In &lt;a href=\"Grover%27s%20algorithm%23Applications\"&gt;Grover's algorithm&lt;/a&gt;, &lt;a href=\"Lov%20Grover\"&gt;Lov&lt;/a&gt; named this generic basis vector set \"the database\".\nThe selection of basis vectors against to measure a quantum state will influence the outcome of the measurement. See &lt;a href=\"Change%20of%20basis%23Endomorphisms\"&gt;change of basis&lt;/a&gt; and &lt;a href=\"Von%20Neumann%20entropy\"&gt;Von Neumann entropy&lt;/a&gt; for details. In this article, we always use the \"computational &lt;a href=\"Basis%20%28linear%20algebra%29\"&gt;basis&lt;/a&gt;\", which means that we have labeled the formula_3 basis vectors of an -qubit &lt;a href=\"quantum%20register\"&gt;register&lt;/a&gt; or use the &lt;a href=\"Binary%20number%23Counting%20in%20binary\"&gt;binary representation&lt;/a&gt; \nIn the quantum computing domain, it is generally assumed that the basis vectors constitute an &lt;a href=\"orthonormal%20basis\"&gt;orthonormal basis&lt;/a&gt;.\nAn example of usage of an alternative measurement basis is in the &lt;a href=\"BB84\"&gt;BB84&lt;/a&gt; cipher.\nThe effect of measurement on entangled states.\nIf two &lt;a href=\"quantum%20state\"&gt;quantum state&lt;/a&gt;s (i.e. &lt;a href=\"qubit\"&gt;qubit&lt;/a&gt;s, or &lt;a href=\"quantum%20register\"&gt;register&lt;/a&gt;s) are &lt;a href=\"quantum%20entanglement\"&gt;entangled&lt;/a&gt; (meaning that their combined state cannot be expressed as a &lt;a href=\"tensor%20product\"&gt;tensor product&lt;/a&gt;), measurement of one register affects or reveals the state of the other register by partially or entirely collapsing its state too. This effect can be used for computation, and is used in many algorithms.\nThe Hadamard-CNOT combination acts on the zero-state as follows: \nThis resulting state is the &lt;a href=\"Bell%20state\"&gt;Bell state&lt;/a&gt; = \\frac{1}{\\sqrt{2}}\\begin{bmatrix} 1 \\\\ 0 \\\\ 0 \\\\ 1\\end{bmatrix}&lt;/math&gt;.}} It cannot be described as a tensor product of two qubits. There is no solution for\nbecause for example needs to be both non-zero and zero in the case of and .\nThe quantum state \"spans\" the two qubits. This is called \"entanglement\". Measuring one of the two qubits that make up this Bell state will result in that the other qubit logically must have the same value, both must be the same: Either it will be found in the state or in the state If we measure one of the qubits to be for example then the other qubit must also be because their combined state \"became\" Measurement of one of the qubits collapses the entire quantum state, that span the two qubits.\nThe &lt;a href=\"Greenberger%E2%80%93Horne%E2%80%93Zeilinger%20state\"&gt;GHZ state&lt;/a&gt; is a similar entangled quantum state that spans three or more qubits.\nThis type of value-assignment occurs \"instantaneously over any distance\" and this has as of 2018 been experimentally verified by &lt;a href=\"Quantum%20Experiments%20at%20Space%20Scale\"&gt;QUESS&lt;/a&gt; for distances of up to 1200 kilometers. That the phenomena appears to happen instantaneously as opposed to the time it would take to traverse the distance separating the qubits at the speed of light is called the &lt;a href=\"EPR%20paradox\"&gt;EPR paradox&lt;/a&gt;, and it is an open question in physics how to resolve this. Originally it was solved by giving up the assumption of &lt;a href=\"local%20realism\"&gt;local realism&lt;/a&gt;, but other &lt;a href=\"Interpretations%20of%20quantum%20mechanics\"&gt;interpretations&lt;/a&gt; have also emerged. For more information see the &lt;a href=\"Bell%20test%20experiments\"&gt;Bell test experiments&lt;/a&gt;. The &lt;a href=\"no-communication%20theorem\"&gt;no-communication theorem&lt;/a&gt; proves that this phenomena cannot be used for faster-than-light communication of &lt;a href=\"Entropy%20%28information%20theory%29\"&gt;classical information&lt;/a&gt;.\nMeasurement on registers with pairwise entangled qubits.\nIf we now measure the qubits in register A, then register B will be found to contain the same value as A. If we however instead apply a quantum logic gate on A and then measure, then where formula_145 is the &lt;a href=\"Unitary%20matrix\"&gt;unitary inverse&lt;/a&gt; of .\nBecause of how &lt;a href=\"%23Unitary%20inversion%20of%20gates\"&gt;unitary inverses of gates&lt;/a&gt; act, For example, say formula_177, then \nThe equality will hold no matter in which order measurement is performed (on the registers A or B), assuming that has run to completion. Measurement can even be randomly and concurrently interleaved qubit by qubit, since the measurements assignment of one qubit will limit the possible value-space from the other entangled qubits.\nEven though the equalities holds, the probabilities for measuring the possible outcomes may change as a result of applying , as may be the intent in a quantum search algorithm.\nThis effect of value-sharing via entanglement is used in &lt;a href=\"Shor%27s%20algorithm\"&gt;Shor's algorithm&lt;/a&gt;, &lt;a href=\"Quantum%20phase%20estimation\"&gt;phase estimation&lt;/a&gt; and in &lt;a href=\"Quantum%20counting%20algorithm\"&gt;quantum counting&lt;/a&gt;. Using the &lt;a href=\"Quantum%20Fourier%20transform\"&gt;Fourier transform&lt;/a&gt; to amplify the probability amplitudes of the solution states for some &lt;a href=\"Computational%20problem\"&gt;problem&lt;/a&gt; is a generic method known as \"&lt;a href=\"Quantum%20algorithm%23Fourier%20fishing%20and%20Fourier%20checking\"&gt;Fourier fishing&lt;/a&gt;\".\nLogic function synthesis.\nFunctions and routines that only use gates can themselves be described as matrices, just like the smaller gates. The matrix that represents a quantum function acting on formula_135 qubits has size For example, a function that acts on a \"qubyte\" (a &lt;a href=\"Quantum%20register\"&gt;register&lt;/a&gt; of 8 qubits) would be represented by a matrix with formula_179 elements.\nUnitary transformations that are not in the set of gates natively available at the quantum computer (the primitive gates) can be synthesised, or approximated, by combining the available primitive gates in a &lt;a href=\"quantum%20circuit\"&gt;circuit&lt;/a&gt;. One way to do this is to factor the matrix that encodes the unitary transformation into a product of tensor products (i.e. &lt;a href=\"%23Serially%20wired%20gates\"&gt;series&lt;/a&gt; and &lt;a href=\"%23Parallel%20gates\"&gt;parallel&lt;/a&gt; circuits) of the available primitive gates. The &lt;a href=\"Group%20%28mathematics%29\"&gt;group&lt;/a&gt; &lt;a href=\"Unitary%20group\"&gt;U(2\"q\")&lt;/a&gt; is the &lt;a href=\"symmetry%20group\"&gt;symmetry group&lt;/a&gt; for the gates that act on formula_135 qubits. Factorization is then the &lt;a href=\"Computational%20problem\"&gt;problem&lt;/a&gt; of finding a path in U(2\"q\") from the &lt;a href=\"Generating%20set%20of%20a%20group\"&gt;generating set&lt;/a&gt; of primitive gates. The &lt;a href=\"Solovay%E2%80%93Kitaev%20theorem\"&gt;Solovay\u2013Kitaev theorem&lt;/a&gt; shows that given a sufficient set of primitive gates, there exist an efficient approximate for any gate. For the general case with a large number of qubits this direct approach to circuit synthesis is &lt;a href=\"Computational%20complexity%20theory%23Intractability\"&gt;intractable&lt;/a&gt;.\nBecause the gates &lt;a href=\"unitary%20matrix\"&gt;unitary&lt;/a&gt; nature, all functions must be &lt;a href=\"reversible%20computing\"&gt;reversible&lt;/a&gt; and always be &lt;a href=\"bijective\"&gt;bijective&lt;/a&gt; mappings of input to output. There must always exist a function formula_181 such that Functions that are not invertible can be made invertible by adding &lt;a href=\"Ancilla%20bit\"&gt;ancilla qubits&lt;/a&gt; to the input or the output, or both. After the function has run to completion, the ancilla qubits can then either be &lt;a href=\"Uncomputation\"&gt;uncomputed&lt;/a&gt; or left untouched. Measuring or otherwise collapsing the quantum state of an ancilla qubit (e.g. by re-initializing the value of it, or by its spontaneous &lt;a href=\"Quantum%20decoherence\"&gt;decoherence&lt;/a&gt;) that have not been uncomputed may result in errors, as their state may be entangled with the qubits that are still being used in computations.\nLogically irreversible operations, for example addition modulo formula_3 of two formula_1-qubit registers a and b, can be made logically reversible by adding information to the output, so that the input can be computed from the output (i.e. there exist a function In our example, this can be done by passing on one of the input registers to the output: The output can then be used to compute the input (i.e. given the output formula_184 and we can easily find the input; formula_185 is given and and the function is made bijective.\nAll &lt;a href=\"boolean%20algebra\"&gt;boolean algebra&lt;/a&gt;ic expressions can be encoded as unitary transforms (quantum logic gates), for example by using combinations of the &lt;a href=\"%23Pauli%20X\"&gt;Pauli-X&lt;/a&gt;, &lt;a href=\"%23CNOT\"&gt;CNOT&lt;/a&gt; and &lt;a href=\"%23CCNOT\"&gt;Toffoli&lt;/a&gt; gates. These gates are &lt;a href=\"Functional%20completeness\"&gt;functionally complete&lt;/a&gt; in the boolean logic domain.\nThere are many unitary transforms available in the libraries of &lt;a href=\"Q%20Sharp\"&gt;Q#&lt;/a&gt;, &lt;a href=\"Quantum%20Computation%20Language\"&gt;QCL&lt;/a&gt;, &lt;a href=\"Qiskit\"&gt;Qiskit&lt;/a&gt;, and other &lt;a href=\"quantum%20programming\"&gt;quantum programming&lt;/a&gt; languages. It also appears in the literature.\nFor example, formula_186, where formula_187 is the number of qubits that constitutes the &lt;a href=\"Quantum%20register\"&gt;register&lt;/a&gt; is implemented as the following in QCL:\ncond qufunct inc(qureg x) { // increment register\n int i;\n for i = #x-1 to 0 step -1 {\n CNot(x[i], x[0::i]); // apply controlled-not from\n } // MSB to LSB\nIn QCL, decrement is done by \"undoing\" increment. The prefix codice_1 is used to instead run the &lt;a href=\"%23Unitary%20inversion%20of%20gates\"&gt;unitary inverse&lt;/a&gt; of the function. codice_2 is the inverse of codice_3 and instead performs the operation }\\rangle&lt;/math&gt;.}} The codice_4 keyword means that the function can be &lt;a href=\"%23Controlled%20gates\"&gt;conditional&lt;/a&gt;.\nIn the &lt;a href=\"model%20of%20computation\"&gt;model of computation&lt;/a&gt; used in this article (the &lt;a href=\"quantum%20circuit\"&gt;quantum circuit&lt;/a&gt; model), a classic computer generates the gate composition for the quantum computer, and the quantum computer behaves as a &lt;a href=\"coprocessor\"&gt;coprocessor&lt;/a&gt; that receives instructions from the classical computer about which primitive gates to apply to which qubits. Measurement of quantum registers results in binary values that the classical computer can use in its computations. &lt;a href=\"Quantum%20algorithm\"&gt;Quantum algorithm&lt;/a&gt;s often contain both a classical and a quantum part. Unmeasured &lt;a href=\"Input/output\"&gt;I/O&lt;/a&gt; (sending qubits to remote computers without collapsing their quantum states) can be used to create &lt;a href=\"Quantum%20network\"&gt;networks of quantum computers&lt;/a&gt;. &lt;a href=\"Quantum%20teleportation%23Entanglement%20swapping\"&gt;Entanglement swapping&lt;/a&gt; can then be used to realize &lt;a href=\"distributed%20algorithms\"&gt;distributed algorithms&lt;/a&gt; with quantum computers that are not directly connected. Examples of distributed algorithms that only require the use of a handful of quantum logic gates is &lt;a href=\"superdense%20coding\"&gt;superdense coding&lt;/a&gt;, the &lt;a href=\"quantum%20Byzantine%20agreement\"&gt;quantum Byzantine agreement&lt;/a&gt; and the &lt;a href=\"BB84\"&gt;BB84&lt;/a&gt; &lt;a href=\"Quantum%20key%20distribution\"&gt;cipherkey exchange protocol&lt;/a&gt;."
}