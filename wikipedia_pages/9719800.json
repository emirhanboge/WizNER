{
    "id": "9719800",
    "revid": "11677590",
    "url": "https://en.wikipedia.org/wiki?curid=9719800",
    "title": "Reduction (recursion theory)",
    "text": "In &lt;a href=\"computability%20theory\"&gt;computability theory&lt;/a&gt;, many reducibility relations (also called reductions, reducibilities, and notions of reducibility) are studied. They are motivated by the question: given sets formula_1 and formula_2 of natural numbers, is it possible to effectively convert a method for deciding membership in formula_2 into a method for deciding membership in formula_1? If the answer to this question is affirmative then formula_1 is said to be reducible to formula_2. \nThe study of reducibility notions is motivated by the study of &lt;a href=\"decision%20problems\"&gt;decision problems&lt;/a&gt;. For many notions of reducibility, if any &lt;a href=\"computable%20set\"&gt;noncomputable&lt;/a&gt; set is reducible to a set formula_1 then formula_1 must also be noncomputable. This gives a powerful technique for proving that many sets are noncomputable.\nReducibility relations.\nA reducibility relation is a binary relation on sets of natural numbers that is \nThese two properties imply that reducibility is a &lt;a href=\"preorder\"&gt;preorder&lt;/a&gt; on the powerset of the natural numbers. Not all preorders are studied as reducibility notions, however. The notions studied in computability theory have the informal property that formula_1 is reducible to formula_2 if and only if any (possibly noneffective) decision procedure for formula_2 can be effectively converted to a decision procedure for formula_1. The different reducibility relations vary in the methods they permit such a conversion process to use. \nDegrees of a reducibility relation.\nEvery reducibility relation (in fact, every preorder) induces an equivalence relation on the powerset of the natural numbers in which two sets are equivalent if and only if each one is reducible to the other. In computability theory, these equivalence classes are called the degrees of the reducibility relation. For example, the Turing degrees are the equivalence classes of sets of naturals induced by Turing reducibility. \nThe degrees of any reducibility relation are &lt;a href=\"partial%20order\"&gt;partially ordered&lt;/a&gt; by the relation in the following manner. Let formula_19 be a reducibility relation and let formula_12 and formula_21 be two of its degrees. Then formula_22 if and only if there is a set formula_1 in formula_12 and a set formula_2 in formula_21 such that formula_27. This is equivalent to the property that for every set formula_1 in formula_12 and every set formula_2 in formula_21, formula_27, because any two sets in \"C\" are equivalent and any two sets in formula_21 are equivalent. It is common, as shown here, to use boldface notation to denote degrees.\nTuring reducibility.\nThe most fundamental reducibility notion is &lt;a href=\"Turing%20reducibility\"&gt;Turing reducibility&lt;/a&gt;. A set formula_1 of natural numbers is Turing reducible to a set formula_2 if and only if there is an &lt;a href=\"oracle%20Turing%20machine\"&gt;oracle Turing machine&lt;/a&gt; that, when run with formula_2 as its oracle set, will compute the &lt;a href=\"indicator%20function\"&gt;indicator function&lt;/a&gt; (characteristic function) of formula_1. Equivalently, formula_1 is Turing reducible to formula_2 if and only if there is an algorithm for computing the indicator function for formula_1 provided that the algorithm is provided with a means to correctly answer questions of the form \"Is formula_41 in formula_2?\". \nTuring reducibility serves as a dividing line for other reducibility notions because, according to the &lt;a href=\"Church-Turing%20thesis\"&gt;Church-Turing thesis&lt;/a&gt;, it is the most general reducibility relation that is effective. Reducibility relations that imply Turing reducibility have come to be known as strong reducibilities, while those that are implied by Turing reducibility are weak reducibilities. Equivalently, a strong reducibility relation is one whose degrees form a finer equivalence relation than the Turing degrees, while a weak reducibility relation is one whose degrees form a coarser equivalence relation than Turing equivalence.\nReductions stronger than Turing reducibility.\nThe strong reducibilities include\nMany of these were introduced by Post (1944). Post was searching for a non-&lt;a href=\"Computable%20set\"&gt;computable&lt;/a&gt;, &lt;a href=\"computably%20enumerable\"&gt;computably enumerable&lt;/a&gt; set which the &lt;a href=\"halting%20problem\"&gt;halting problem&lt;/a&gt; could not be Turing reduced to. As he could not construct such a set in 1944, he instead worked on the analogous problems for the various reducibilities that he introduced. These reducibilities have since been the subject of much research, and many relationships between them are known. \nBounded reducibilities.\nA bounded form of each of the above strong reducibilities can be defined. The most famous of these is bounded truth-table reduction, but there are also bounded Turing, bounded weak truth-table, and others. These first three are the most common ones and they are based on the number of queries. For example, a set formula_1 is bounded truth-table reducible to formula_2 if and only if the Turing machine formula_88 computing formula_1 relative to formula_2 computes a list of up to formula_41 numbers, queries formula_2 on these numbers and then terminates for all possible oracle answers; the value formula_41 is a constant independent of formula_47. The difference between bounded weak truth-table and bounded Turing reduction is that in the first case, the up to formula_41 queries have to be made at the same time while in the second case, the queries can be made one after the other. For that reason, there are cases where formula_1 is bounded Turing reducible to formula_2 but not weak truth-table reducible to formula_2.\nStrong reductions in computational complexity.\nThe strong reductions listed above restrict the manner in which oracle information can be accessed by a decision procedure but do not otherwise limit the computational resources available. Thus if a set formula_1 is &lt;a href=\"computable%20set\"&gt;decidable&lt;/a&gt; then formula_1 is reducible to any set formula_2 under any of the strong reducibility relations listed above, even if formula_1 is not polynomial-time or exponential-time decidable. This is acceptable in the study of computability theory, which is interested in theoretical computability, but it is not reasonable for &lt;a href=\"computational%20complexity%20theory\"&gt;computational complexity theory&lt;/a&gt;, which studies which sets can be decided under certain asymptotical resource bounds. \nThe most common reducibility in computational complexity theory is &lt;a href=\"Polynomial-time%20reduction\"&gt;polynomial-time reducibility&lt;/a&gt;; a set \"A\" is polynomial-time reducible to a set formula_2 if there is a polynomial-time function \"f\" such that for every formula_41, formula_41 is in formula_1 if and only if formula_107 is in formula_2. This reducibility is, essentially, a resource-bounded version of many-one reducibility. Other resource-bounded reducibilities are used in other contexts of computational complexity theory where other resource bounds are of interest.\nReductions weaker than Turing reducibility.\nAlthough Turing reducibility is the most general reducibility that is effective, weaker reducibility relations are commonly studied. These reducibilities are related to the relative definability of sets over arithmetic or set theory. They include:"
}