{
    "id": "10989140",
    "revid": "1068238587",
    "url": "https://en.wikipedia.org/wiki?curid=10989140",
    "title": "Dynamic Language Runtime",
    "text": "The Dynamic Language Runtime (DLR) from &lt;a href=\"Microsoft\"&gt;Microsoft&lt;/a&gt; runs on top of the &lt;a href=\"Common%20Language%20Runtime\"&gt;Common Language Runtime&lt;/a&gt; (CLR) and provides &lt;a href=\"computer%20language\"&gt;computer language&lt;/a&gt; services for &lt;a href=\"dynamic%20language\"&gt;dynamic language&lt;/a&gt;s. These services include:\nThe DLR is used to implement dynamic languages on the &lt;a href=\".NET%20Framework\"&gt;.NET Framework&lt;/a&gt;, including the &lt;a href=\"IronPython\"&gt;IronPython&lt;/a&gt; and &lt;a href=\"IronRuby\"&gt;IronRuby&lt;/a&gt; projects.\nBecause the dynamic language implementations share a common underlying system, it should be easier for them to interact with one another. For example, it should be possible to use libraries from any dynamic language in any other dynamic language. In addition, the hosting API allows interoperability with statically typed &lt;a href=\"list%20of%20CLI%20languages\"&gt;CLI languages&lt;/a&gt; like &lt;a href=\"C%20Sharp%20%28programming%20language%29\"&gt;C#&lt;/a&gt; and &lt;a href=\"Visual%20Basic%20.NET\"&gt;Visual Basic .NET&lt;/a&gt;.\nHistory.\nMicrosoft's Dynamic Language Runtime project was announced by Microsoft at &lt;a href=\"MIX%20%28Microsoft%29\"&gt;MIX&lt;/a&gt; 2007.\nMicrosoft shipped .NET DLR 0.9 beta in November 2008, and final 0.9 in December 2008. Version 1.0 shipped in April 2010. In July 2010, Microsoft changed the license of the DLR from the &lt;a href=\"Shared%20source%23Microsoft%20Public%20License%20%28Ms-PL%29\"&gt;Microsoft Public License&lt;/a&gt; to the &lt;a href=\"Apache%20License%202.0\"&gt;Apache License 2.0&lt;/a&gt;. With the release of &lt;a href=\".NET%204\"&gt;.NET 4&lt;/a&gt;, also in April 2010, DLR was incorporated into the .NET Framework itself.\nThe open source DLR project hosted on &lt;a href=\"GitHub\"&gt;GitHub&lt;/a&gt; has a few additional features for language implementers. After the July 2010 release, there was little activity on the project for some years. This was interpreted by a Microsoft developer who worked on &lt;a href=\"IronRuby\"&gt;IronRuby&lt;/a&gt; as a lack of commitment from Microsoft to dynamic languages on the .NET Framework. However, there has been regular activity since 2016/17, leading to a number of improvements and upgrades.\nSupported languages.\nThe DLR services are currently used in the development version of &lt;a href=\"IronRuby\"&gt;IronRuby&lt;/a&gt;, a .NET implementation of the &lt;a href=\"Ruby%20%28programming%20language%29\"&gt;Ruby&lt;/a&gt; language, and for &lt;a href=\"IronPython\"&gt;IronPython&lt;/a&gt;.\nIn 2007, Microsoft planned to use the DLR for the upcoming &lt;a href=\"Visual%20Basic%20.NET%232010%20%28VB%2010.0%29\"&gt;Visual Basic 2010 (VB 10.0)&lt;/a&gt; and &lt;a href=\"JScript\"&gt;Managed JScript&lt;/a&gt; (&lt;a href=\"ECMAScript\"&gt;ECMAScript&lt;/a&gt; 3.0). However, as of August 2009, Microsoft has no more plans to implement Managed JScript on the DLR. Like &lt;a href=\"C%20Sharp%20%28programming%20language%29\"&gt;C#&lt;/a&gt;, Visual Basic can access objects from dynamic languages built on the DLR such as &lt;a href=\"IronPython\"&gt;IronPython&lt;/a&gt; and &lt;a href=\"IronRuby\"&gt;IronRuby&lt;/a&gt;.\n&lt;a href=\"PowerShell\"&gt;PowerShell&lt;/a&gt; 3.0, released in &lt;a href=\"Windows%208\"&gt;Windows 8&lt;/a&gt;, was updated to use the DLR.\n&lt;a href=\"IronScheme\"&gt;IronScheme&lt;/a&gt;, a &lt;a href=\"Scheme%20%28programming%20language%29\"&gt;Scheme&lt;/a&gt; implementation, was planning to build upon the DLR. This idea was abandoned because the DLR &lt;a href=\"Branching%20%28software%29\"&gt;branch&lt;/a&gt; used by the project became out of sync with the &lt;a href=\"Trunk%20%28software%29\"&gt;trunk&lt;/a&gt;, and also because (according to the project coordinator) the current version of the DLR at that time could not support the majority of Scheme's requirements.\nArchitecture.\nThe Dynamic Language Runtime is built on the idea that it is possible to implement language specificities on top of a generic &lt;a href=\"language-independent%20specification\"&gt;language-agnostic&lt;/a&gt; &lt;a href=\"abstract%20syntax%20tree\"&gt;abstract syntax tree&lt;/a&gt;, whose nodes correspond to a specific functionality that is common to many dynamic languages. This architecture is backed by the idea that the number of elementary language constructs that would have to be implemented on the generic stack should be inherently limited. The DLR &lt;a href=\"Metadata%20%28CLI%29%23Reflection\"&gt;dynamically generates&lt;/a&gt; code corresponding to the functionality expressed by these nodes. The compiler for any dynamic language implemented on top of the DLR has to generate DLR abstract trees, and hand it over to the DLR libraries.\nThe DLR provides dynamically-updated codice_1 objects that cache the task of binding methods to objects. Since the type of an object\u2014as well as the members it contains\u2014in dynamic languages can change during a program lifetime, a method invocation must check the method list to see if the invocation is a valid one. codice_1 objects represent and cache the state of the object and its methods; any update to the object is reflected in the codice_1 objects as well. DLR routes all method invocations via the codice_1 objects, which then performs a fast lookup and &lt;a href=\"name%20binding\"&gt;binding&lt;/a&gt; of the method with the actual implementation.\nIn contrast to other efforts like the &lt;a href=\"Parrot%20virtual%20machine\"&gt;Parrot virtual machine&lt;/a&gt; (with no dependencies) or &lt;a href=\"Da%20Vinci%20Machine\"&gt;Da Vinci Machine&lt;/a&gt; (built on Java's &lt;a href=\"JVM\"&gt;JVM&lt;/a&gt; by adding new bytecodes in the &lt;a href=\"Java%20bytecode\"&gt;JVM instruction set&lt;/a&gt;), the DLR is built on top of the existing &lt;a href=\"Common%20Language%20Runtime\"&gt;Common Language Runtime&lt;/a&gt;, the &lt;a href=\".NET%20Framework\"&gt;.NET Framework&lt;/a&gt; virtual machine."
}