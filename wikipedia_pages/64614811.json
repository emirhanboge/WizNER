{
    "id": "64614811",
    "revid": "43268510",
    "url": "https://en.wikipedia.org/wiki?curid=64614811",
    "title": "GDevelop",
    "text": "GDevelop is a 2D &lt;a href=\"cross-platform\"&gt;cross-platform&lt;/a&gt;, &lt;a href=\"Free%20and%20open-source%20software\"&gt;free and open-source&lt;/a&gt; &lt;a href=\"game%20engine\"&gt;game engine&lt;/a&gt;, which mainly focuses on creating PC and Mobile games, as well as &lt;a href=\"HTML5\"&gt;HTML5&lt;/a&gt; games playable in the browser. Created by Florian Rival, who is a software engineer at &lt;a href=\"Google\"&gt;Google&lt;/a&gt;, GDevelop is mainly aimed at non-programmers and game developers of all skillsets, employing event based &lt;a href=\"Visual%20programming%20language\"&gt;visual programming&lt;/a&gt; similar to such engines as &lt;a href=\"Construct%20%28game%20engine%29\"&gt;Construct&lt;/a&gt;, &lt;a href=\"Stencyl\"&gt;Stencyl&lt;/a&gt;, and Tynker.\nDue to its ease of use and being distributed under an open-source license, GDevelop has found use in games education, ranging from primary school to university courses. It has also been used by educators and researchers to create learning and &lt;a href=\"Serious%20game\"&gt;serious games&lt;/a&gt;.\nGame Creation without Programming Languages.\nOne of GDevelop's primary goals is to allow creators to make full video games without using any programming languages. This is primarily done through three methods:\nEvent-based logic.\nGDevelop's primary focus is to allow all users to create games without code or a programming language. This is accomplished via the Event system, which creates logic by monitoring for Conditions on when to trigger, and actions to take once the event conditions are met. The majority of events are presented in normalized language, so creators can avoid having to understand coding concepts found in many programming languages.\nBehaviors.\nBehaviors allow for advanced combinations of pre-built functions and events to add logic like physics-based movement, pathfinding, acting as a platform or platform character game, allowing to move the object with the mouse or touch, transitions, etc. Behaviors can be added to game objects, and the same object can have several behaviors. Behaviors can also be created using the Event system - allowing users to extend the existing set of behaviors without coding.\nEasy content pipeline.\nAll game content, such as character art, backgrounds, text, etc, can be added directly through a point and click interface in the editor. Some example content types are Sprites, Tiled Sprites, 9-Patch (Panel) Sprites, Text Objects, Text Objects with BBText support, Shape Painters, and more. Music and Sounds can be imported directly into the events that utilize them.\nOther Features.\nGDevelop has two separate clients, Web and Local. The web client allowing for game development directly through the browser and saving to a cloud storage solution. Both versions share the majority of their feature-set. A non-exhaustive feature-set available to both clients include:\nExtensions.\nUser-made extensions can be created to allow for custom events, behaviors, or functions. Existing events can be turned into extensions from within a project's event sheet. These extensions can be shared within the IDE to the entire community and can be added within a few clicks. Extensions can also implement new engine capabilities such as Kongregate API integrations or full masking support. Extensions can do a lot of things to help your game be better. Some things extensions can do are add &lt;a href=\"Game%20controller\"&gt;gamepad support&lt;/a&gt; and cheats like the Konami code.\nJavascript Language Support.\nAlthough GDevelop's primary focus is using the event system to enable development without any programming language code, a Javascript Code block can also be used in place of any event.\nIn addition to using JavaScript code blocks for game logic, this also allows advanced users to extend the capabilities of events by directly manipulating the engine. This opens up new horizons for any developer.\nMonetization Support.\nGDevelop supports &lt;a href=\"AdMob\"&gt;AdMob&lt;/a&gt;, &lt;a href=\"Shopify\"&gt;Shopify&lt;/a&gt;, and Facebook Ads allowing for advertising in the form of video, banner, interstitial screen and link to purchase.\nShader effects.\nIntroduced in beta 84, GDevelop currently supports effects applied to each layer of a game scene. Shaders allow for advanced graphical effects such as drop shadows, reflections, scanlines, color swapping, and much more without having to create custom art for the effect.\nBuilt-in Content Editors.\nGdevelop's IDE also has built in editors for graphics and audio. Piskel is integrated for editing art, and JFXR is integrated for creating sound effects.\nOne-Click Export.\nGames can be exported directly to Android, Windows, &lt;a href=\"Linux\"&gt;Linux&lt;/a&gt;, and Web platforms. It is possible to make a local export that allows for manual iOS, Android, or desktop OS compiling, as well as export to platforms like Kongregate, itch.io, Google Play, etc.\nSupported platforms.\nGDevelop allows users to compile games into stand-alone games, without requiring the software to run.\nThe following platforms are supported for One-Click Export:\nAdditionally, the projects can be exported locally, and manually compiled to the following platforms:\nTechnologies used.\nGDevelop 5 uses GDJS, the same JavaScript engine as GDevelop 4, an older and currently unsupported version. It uses Pixi.JS v5 as a renderer. The editor interface is in React and uses asm.js to manipulate projects using the C++ code inherited from GDevelop 4. Both the editor interface and games are packaged using Electron.\nGDevelop 4 uses a GDCpp, a C++ engine, as well as GDJS, a JavaScript engine. GDCpp uses SFML and GDJS uses Pixi.JS v4 as a renderer. The editor interface is written in C++ and is essentially based on the library &lt;a href=\"SFML\"&gt;SFML&lt;/a&gt; for multimedia management and on &lt;a href=\"wxWidgets\"&gt;wxWidgets&lt;/a&gt; user interface. The software also uses Boost and &lt;a href=\"TinyXML\"&gt;TinyXML&lt;/a&gt;. The IDE and GDCpp were packaged via a standard C++ compiler.\nHistory.\nAccording to the main author of the software:The idea with GDevelop is making game creation accessible to anyone, from beginners to seasoned game developers. GDevelop allows you to create the logic of your game using visual events, composed of conditions and actions. You can also build your game objects by composing pre-defined and customizable behaviors. This means that the entry barrier of learning the syntax and idioms of a programming language is removed. For people that are not developers, it\u2019s a way to quickly get up and running with an intuitive interface. Lots of people love sandbox games. GDevelop is a sandbox - but what you can do with it is unlimited.GDevelop's initial 1.0 release was in 2008, on a foundation that was primarily C++ and had a more native OS focus. Over the years more and more features were added such as tilemap support, a particle system, and limited network support. Leading up to 2018, discussions were had around migrating GDevelop to a more portable and platform-agnostic base, and in January of 2018 GDevelop 5 (GD5) was released.\nUntil GD5, the main engine was the C++ engine (GDCpp). GD5 dropped support for it in favor of the JavaScript engine (GDJS), first introduced the 1. July 2013. The reason of the drop was because it had issues across platforms, couldn't run in the browser or on phones due to the renderer (SFML) it was using, and GDevelop was lacking too many contributors in general to support both a JavaScript and a C++ engine.\nIt is planned to bring a native engine back in the long term, but not in the short term\nGD5 included a complete rework of the IDE to begin using web technologies, like &lt;a href=\"https%3A//www.pixijs.com/\"&gt;Pixi.JS&lt;/a&gt; and &lt;a href=\"https%3A//reactjs.org/\"&gt;React&lt;/a&gt;. Support around GD4 was shifted over to GD5 to bring focus on enhancing the future of the engine.\nSince GD5's launch, additional features and functionality have continually been added, such as BBText support, Dialogue Support via Yarnspinner, and layer based shaders via PixiJS Shaders. Development and enhancement of the platform continues from 4ian and a group of repeat contributors."
}