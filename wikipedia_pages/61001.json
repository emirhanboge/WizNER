{
    "id": "61001",
    "revid": "18872885",
    "url": "https://en.wikipedia.org/wiki?curid=61001",
    "title": "Portable Distributed Objects",
    "text": "Portable Distributed Objects (PDO) is an &lt;a href=\"application%20programming%20interface\"&gt;application programming interface&lt;/a&gt; (API) for creating &lt;a href=\"object-oriented\"&gt;object-oriented&lt;/a&gt; code that can be executed remotely on a &lt;a href=\"computer%20network\"&gt;network&lt;/a&gt; of computers. It was created by &lt;a href=\"NeXT%20Computer%2C%20Inc.\"&gt;NeXT Computer, Inc.&lt;/a&gt; using their &lt;a href=\"OpenStep\"&gt;OpenStep&lt;/a&gt; system, whose use of &lt;a href=\"Objective-C\"&gt;Objective-C&lt;/a&gt; made the package very easy to write. It was characterized by its very light weight and high speed in comparison to similar systems such as &lt;a href=\"CORBA\"&gt;CORBA&lt;/a&gt;.\nVersions of PDO were available for &lt;a href=\"Solaris%20%28operating%20system%29\"&gt;Solaris&lt;/a&gt;, &lt;a href=\"HP-UX\"&gt;HP-UX&lt;/a&gt; and all versions of the OPENSTEP system. A version that worked with &lt;a href=\"Microsoft\"&gt;Microsoft&lt;/a&gt; &lt;a href=\"Object%20Linking%20and%20Embedding\"&gt;OLE&lt;/a&gt; was also available called \"D'OLE\", allowing distributed code written using PDO on any platform to be presented on Microsoft systems as if they were local OLE objects.\nPDO was one of a number of &lt;a href=\"distributed%20object\"&gt;distributed object&lt;/a&gt; systems created in the early 1990s, a design model where \"front end\" applications on &lt;a href=\"GUI\"&gt;GUI&lt;/a&gt;-based microcomputers would call code running on &lt;a href=\"Mainframe%20computer\"&gt;mainframe&lt;/a&gt; and &lt;a href=\"minicomputer\"&gt;minicomputer&lt;/a&gt;s for their processing and data storage. Microsoft was evolving OLE into the &lt;a href=\"Component%20Object%20Model\"&gt;Component Object Model&lt;/a&gt; (COM) and a similar distributed version called DCOM, &lt;a href=\"IBM\"&gt;IBM&lt;/a&gt; had their &lt;a href=\"System%20Object%20Model\"&gt;System Object Model&lt;/a&gt; (SOM/DSOM), &lt;a href=\"Sun%20Microsystems\"&gt;Sun Microsystems&lt;/a&gt; was promoting their &lt;a href=\"Distributed%20Objects%20Everywhere\"&gt;Distributed Objects Everywhere&lt;/a&gt;, and there were a host of smaller players as well. With the exception of the limited functionality in COM, most of these systems were extremely heavyweight, tended to be very large and slow, and often were very difficult to use.\nPDO, on the other hand, relied on a small number of features in the Objective-C &lt;a href=\"Run%20time%20system\"&gt;runtime&lt;/a&gt; to handle both portability as well as distribution. The key feature was the language's support for a \"second chance\" method in all classes; if a method call on an object failed because the object didn't support it (normally not allowed in most languages due to &lt;a href=\"strong%20typing\"&gt;strong typing&lt;/a&gt;), the runtime would then bundle the message into a compact format and pass it back into the object's codice_1 method.\nThe normal behavior for codice_1 was to return an error, including details taken from the message (the \"invocation\"). PDO instead supplied a number of new objects with codice_1 methods that passed the invocation object to another machine on the network, with various versions to support different networks and platforms. Calling methods on remote objects was almost invisible; after some network setup (a few lines typically) PDO objects were instantiated locally and called the same way as any other object on the system. The PDO object then forwarded the invocation to the remote computer for processing and unbundled the results when they were returned.\nIn comparison with &lt;a href=\"CORBA\"&gt;CORBA&lt;/a&gt;, PDO programs were typically 1/10 or less in size; it was common for NeXT staffers to write into magazines showing how to re-implement a multi-page CORBA article in perhaps 15 lines of code. From a programming standpoint, there was nearly nothing as easy to use as PDO.\nHowever, PDO was also reliant entirely on Objective-C to function. This was a price most were unwilling to pay, as at the time &lt;a href=\"C%2B%2B\"&gt;C++&lt;/a&gt; was more widely used and the effort to shift codebases to an entirely new language and paradigm was considered too onerous. PDO never saw much use, and NeXT's emphasis shifted to its new &lt;a href=\"WebObjects\"&gt;WebObjects&lt;/a&gt; framework in 1995.\nThe ability to instantiate any object known to the local process from any other process is a known security vulnerability, and Apple strongly discourages use of PDO for that reason.\nIn addition to the OS X platform, there is &lt;a href=\"GNUstep\"&gt;GNUstep&lt;/a&gt;, which has its own implementation of Distributed Objects."
}